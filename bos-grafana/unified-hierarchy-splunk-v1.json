{
  "dashboard": {
    "annotations": {
      "list": [
        {
          "builtIn": 1,
          "datasource": {
            "type": "grafana",
            "uid": "-- Grafana --"
          },
          "enable": true,
          "hide": true,
          "iconColor": "rgba(0, 211, 255, 1)",
          "name": "Annotations & Alerts",
          "type": "dashboard"
        }
      ]
    },
    "editable": true,
    "fiscalYearStartMonth": 0,
    "graphTooltip": 0,
    "id": null,
    "links": [],
    "panels": [
      {
        "id": 1,
        "type": "gapit-htmlgraphics-panel",
        "title": "Unified Hierarchy - Accordion",
        "transparent": true,
        "gridPos": {
          "h": 24,
          "w": 24,
          "x": 0,
          "y": 0
        },
        "datasource": {
          "type": "grafana-splunk-datasource",
          "uid": "d4c682f8-fd9b-46b2-9b89-e15410aa52dc"
        },
        "targets": [
          {
            "datasource": {
              "type": "grafana-splunk-datasource",
              "uid": "d4c682f8-fd9b-46b2-9b89-e15410aa52dc"
            },
            "query": "| inputlookup bos_services.csv\n| lookup bos_signal_status.csv service_id OUTPUT status\n| eval status_value=case(\n    status==\"Green\", 3,\n    status==\"Amber\", 2,\n    status==\"Red\", 1,\n    1=1, null())\n| stats min(status_value) as service_min_status by l4_product_line, l3_product\n| stats\n    count as total_l3\n    sum(eval(service_min_status==1)) as red_count\n    sum(eval(service_min_status==2)) as amber_count\n    sum(eval(service_min_status==3)) as green_count\n    min(service_min_status) as overall_min_status\n    by l4_product_line\n| eval red_count=coalesce(red_count, 0)\n| eval amber_count=coalesce(amber_count, 0)\n| eval green_count=coalesce(green_count, 0)\n| eval health_status=case(\n    overall_min_status==3, \"Green\",\n    overall_min_status==2, \"Amber\",\n    overall_min_status==1, \"Red\",\n    1=1, \"Unknown\")\n| table l4_product_line red_count amber_count green_count health_status\n| sort l4_product_line",
            "rawQuery": true,
            "refId": "A"
          },
          {
            "datasource": {
              "type": "grafana-splunk-datasource",
              "uid": "d4c682f8-fd9b-46b2-9b89-e15410aa52dc"
            },
            "query": "| inputlookup bos_services.csv\n| lookup bos_signal_status.csv service_id OUTPUT status\n| eval status_value=case(\n    status==\"Green\", 3,\n    status==\"Amber\", 2,\n    status==\"Red\", 1,\n    1=1, null())\n| stats min(status_value) as service_min_status by l4_product_line, l3_product, service_id\n| stats\n    count as total_services\n    sum(eval(service_min_status==1)) as red_count\n    sum(eval(service_min_status==2)) as amber_count\n    sum(eval(service_min_status==3)) as green_count\n    min(service_min_status) as overall_min_status\n    by l4_product_line, l3_product\n| eval red_count=coalesce(red_count, 0)\n| eval amber_count=coalesce(amber_count, 0)\n| eval green_count=coalesce(green_count, 0)\n| eval health_status=case(\n    overall_min_status==3, \"Green\",\n    overall_min_status==2, \"Amber\",\n    overall_min_status==1, \"Red\",\n    1=1, \"Unknown\")\n| table l4_product_line l3_product red_count amber_count green_count health_status\n| sort l4_product_line l3_product",
            "rawQuery": true,
            "refId": "B"
          },
          {
            "datasource": {
              "type": "grafana-splunk-datasource",
              "uid": "d4c682f8-fd9b-46b2-9b89-e15410aa52dc"
            },
            "query": "| inputlookup bos_services.csv\n| join type=left service_id\n    [| inputlookup bos_signal_status.csv\n     | stats\n         sum(eval(status==\"Red\")) as red_count\n         sum(eval(status==\"Amber\")) as amber_count\n         sum(eval(status==\"Green\")) as green_count\n         min(case(status==\"Green\", 3, status==\"Amber\", 2, status==\"Red\", 1)) as min_status\n         by service_id]\n| eval red_count=coalesce(red_count, 0)\n| eval amber_count=coalesce(amber_count, 0)\n| eval green_count=coalesce(green_count, 0)\n| eval min_status=coalesce(min_status, 3)\n| eval health_status=case(\n    min_status==3, \"Green\",\n    min_status==2, \"Amber\",\n    min_status==1, \"Red\",\n    1=1, \"Unknown\")\n| rename displayName as service_name\n| table l4_product_line l3_product service_id service_name red_count amber_count green_count health_status\n| sort l4_product_line l3_product service_name",
            "rawQuery": true,
            "refId": "C"
          }
        ],
        "options": {
          "SVGBaseFix": true,
          "css": "\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    background-color: #F3F4F6;\n    color: #111827;\n    line-height: 1.6;\n    margin: 0;\n    padding: 0;\n    height: 100%;\n    overflow: hidden;\n}\n\n.dashboard-wrapper {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    background-color: #F3F4F6;\n}\n\n.dashboard-header {\n    background-color: #D71E28;\n    color: white;\n    padding: 0.75rem 1.5rem;\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    flex-shrink: 0;\n}\n\n.dashboard-header h1 {\n    font-size: 1.5rem;\n    font-weight: 700;\n}\n\n.header-right {\n    display: flex;\n    align-items: center;\n    gap: 1.5rem;\n}\n\n.timestamp {\n    font-size: 0.75rem;\n    opacity: 0.9;\n}\n\n.guide-icon {\n    font-size: 1.25rem;\n    cursor: pointer;\n    opacity: 0.9;\n    transition: opacity 0.2s;\n}\n\n.guide-icon:hover {\n    opacity: 1;\n}\n\n.quick-reference {\n    position: fixed;\n    top: 0;\n    right: -500px;\n    width: 480px;\n    height: 100%;\n    background: white;\n    box-shadow: -4px 0 16px rgba(0,0,0,0.2);\n    z-index: 1000;\n    transition: right 0.3s ease;\n    overflow-y: auto;\n}\n\n.quick-reference.visible {\n    right: 0;\n}\n\n.quick-reference .header {\n    position: sticky;\n    top: 0;\n    background: white;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 1.5rem;\n    border-bottom: 2px solid #D71E28;\n    z-index: 10;\n}\n\n.quick-reference h2 {\n    font-size: 1.25rem;\n    color: #111827;\n}\n\n.close-btn {\n    cursor: pointer;\n    font-size: 1.5rem;\n    color: #6B7280;\n}\n\n.close-btn:hover {\n    color: #111827;\n}\n\n.quick-reference .content {\n    padding: 1.5rem;\n    color: #374151;\n    line-height: 1.8;\n}\n\n.quick-reference .content h3 {\n    color: #111827;\n    font-size: 1rem;\n    margin-top: 1.5rem;\n    margin-bottom: 0.5rem;\n}\n\n.quick-reference .content p {\n    margin-bottom: 1rem;\n}\n\n.quick-reference .content ul {\n    margin-left: 1.5rem;\n    margin-bottom: 1rem;\n}\n\n.guide-overlay {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(0,0,0,0.3);\n    z-index: 999;\n}\n\n.guide-overlay.visible {\n    display: block;\n}\n\n.container {\n    flex: 1;\n    overflow-y: auto;\n    padding: 1.5rem;\n}\n\n.hierarchy-list {\n    background: white;\n    border-radius: 0.5rem;\n    box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n    overflow: hidden;\n}\n\n.list-header {\n    display: grid;\n    grid-template-columns: 2fr 1fr 2fr 1.5fr;\n    gap: 1rem;\n    padding: 0.75rem 1.5rem;\n    background: #F3F4F6;\n    border-bottom: 2px solid #E5E7EB;\n    font-weight: 600;\n    font-size: 0.75rem;\n    text-transform: uppercase;\n    color: #374151;\n}\n\n.accordion-item {\n    border-bottom: 1px solid #E5E7EB;\n}\n\n.accordion-item:last-child {\n    border-bottom: none;\n}\n\n/* Left border status indicator */\n.accordion-item[data-status=\"Red\"] {\n    border-left: 4px solid #DC2626;\n}\n\n.accordion-item[data-status=\"Amber\"] {\n    border-left: 4px solid #F59E0B;\n}\n\n.accordion-item[data-status=\"Green\"] {\n    border-left: 4px solid #10B981;\n}\n\n.accordion-header {\n    display: grid;\n    grid-template-columns: 2fr 1fr 2fr 1.5fr;\n    gap: 1rem;\n    padding: 0.75rem 1.5rem;\n    cursor: pointer;\n    transition: background 0.2s;\n    align-items: center;\n}\n\n.accordion-header:hover {\n    background: #F3F4F6;\n}\n\n/* Indentation by level */\n.accordion-item[data-level=\"l3\"] .accordion-header {\n    padding-left: 3.5rem; /* 1.5rem base + 2rem indent */\n}\n\n.accordion-item[data-level=\"service\"] .accordion-header {\n    padding-left: 5.5rem; /* 1.5rem base + 4rem indent */\n}\n\n.accordion-children {\n    display: none;\n    overflow: hidden;\n}\n\n.accordion-children.expanded {\n    display: block;\n}\n\n.expand-icon {\n    display: inline-block;\n    width: 1rem;\n    margin-right: 0.5rem;\n    transition: transform 0.2s;\n    color: #6B7280;\n    font-size: 0.875rem;\n    flex-shrink: 0;\n}\n\n.expand-icon.expanded {\n    transform: rotate(90deg);\n}\n\n/* Hide expand icon for services (leaf nodes) */\n.accordion-item[data-level=\"service\"] .expand-icon {\n    visibility: hidden;\n}\n\n.name-cell {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.item-name {\n    font-weight: 600;\n    color: #111827;\n}\n\n.status-cell {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.status-dot {\n    width: 12px;\n    height: 12px;\n    border-radius: 50%;\n    flex-shrink: 0;\n}\n\n.status-dot.healthy { background: #10B981; }\n.status-dot.degraded { background: #F59E0B; }\n.status-dot.critical { background: #EF4444; }\n\n.status-text {\n    font-size: 0.875rem;\n    font-weight: 500;\n}\n\n.status-text.healthy { color: #10B981; }\n.status-text.degraded { color: #F59E0B; }\n.status-text.critical { color: #EF4444; }\n\n.sparkline-cell {\n    display: flex;\n    gap: 2px;\n    height: 24px;\n    align-items: flex-end;\n}\n\n.sparkline-bar {\n    flex: 1;\n    min-width: 3px;\n    height: 24px;\n    border-radius: 1px;\n}\n\n.sparkline-bar.healthy { background: #10B981; }\n.sparkline-bar.degraded { background: #F59E0B; }\n.sparkline-bar.critical { background: #EF4444; }\n\n.rag-cell {\n    display: flex;\n    gap: 0.5rem;\n    font-size: 0.875rem;\n    flex-wrap: wrap;\n}\n\n.rag-badge {\n    padding: 0.25rem 0.5rem;\n    border-radius: 0.25rem;\n    font-size: 0.75rem;\n    font-weight: 600;\n    white-space: nowrap;\n}\n\n.rag-badge.critical {\n    background: #FEE2E2;\n    color: #991B1B;\n}\n\n.rag-badge.degraded {\n    background: #FEF3C7;\n    color: #92400E;\n}\n\n.rag-badge.healthy {\n    background: #D1FAE5;\n    color: #065F46;\n}\n\n.loading, .error {\n    text-align: center;\n    padding: 2rem;\n    color: #6B7280;\n}\n\n.footer {\n    flex-shrink: 0;\n    padding: 0.75rem 1.5rem;\n    text-align: center;\n    font-size: 0.75rem;\n    color: #6B7280;\n    border-top: 1px solid #E5E7EB;\n    background: white;\n}\n",
          "html": "\n<div class=\"dashboard-wrapper\">\n    <div class=\"dashboard-header\">\n        <h1>BOS Unified Hierarchy - Accordion (Experimental)</h1>\n        <div class=\"header-right\">\n            <div class=\"timestamp\" id=\"timestamp\"></div>\n            <div class=\"guide-icon\" id=\"guideIcon\">ℹ️</div>\n        </div>\n    </div>\n\n    <div class=\"container\">\n        <div class=\"hierarchy-list\">\n            <div class=\"list-header\" id=\"listHeader\">\n                <div>Name</div>\n                <div>Status</div>\n                <div>Last 12 Hours</div>\n                <div>Children</div>\n            </div>\n            <div id=\"accordionBody\">\n                <div class=\"loading\">Loading data...</div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"footer\">\n        <strong>BOS Dashboard System</strong> | Generated: 2025-10-08 02:40:54 | Schema: v2.2 | Commit: 865df2f | Generator: generate-unified-hierarchy-splunk.js | ACCORDION PATTERN - EXPERIMENTAL\n    </div>\n</div>\n\n<div class=\"guide-overlay\" id=\"overlay\"></div>\n<div class=\"quick-reference\" id=\"drawer\">\n    <div class=\"header\">\n        <h2>Dashboard Guide</h2>\n        <span class=\"close-btn\" id=\"closeBtn\">×</span>\n    </div>\n    <div class=\"content\" id=\"drawerContent\">\n        <h3>Purpose</h3>\n        <p>Unified hierarchical accordion dashboard for BOS executive views. Click to expand/collapse.</p>\n    </div>\n</div>\n\n<script>\n// Update timestamp\nif (typeof Date !== 'undefined') {\n    var timestampEl = document.getElementById('timestamp');\n    if (timestampEl) {\n        var d = new Date();\n        timestampEl.textContent = 'Updated: ' + d.toISOString().slice(0, 16).replace('T', ' ');\n    }\n}\n</script>\n",
          "onRender": "\n// Accordion state management for hierarchical expansion\nif (typeof window !== 'undefined' && typeof htmlNode !== 'undefined') {\n    // Initialize expanded state tracking\n    if (!window.bosExpandedState) {\n        window.bosExpandedState = {};\n    }\n\n    // Drawer functions\n    window.toggleGuide = function() {\n        var drawer = htmlNode.querySelector('#drawer');\n        var overlay = htmlNode.querySelector('#overlay');\n        if (drawer && overlay) {\n            drawer.classList.toggle('visible');\n            overlay.classList.toggle('visible');\n        }\n    };\n\n    window.closeGuide = function() {\n        var drawer = htmlNode.querySelector('#drawer');\n        var overlay = htmlNode.querySelector('#overlay');\n        if (drawer && overlay) {\n            drawer.classList.remove('visible');\n            overlay.classList.remove('visible');\n        }\n    };\n\n    // Toggle expand/collapse for accordion items\n    window.toggleExpand = function(accordionItem) {\n        if (!accordionItem) return;\n\n        var level = accordionItem.getAttribute('data-level');\n        var id = accordionItem.getAttribute('data-id');\n        var parentId = accordionItem.getAttribute('data-parent');\n\n        // Don't toggle for service items (they navigate instead)\n        if (level === 'service') return;\n\n        var key = level + ':' + (parentId ? parentId + ':' : '') + id;\n        var isExpanded = window.bosExpandedState[key];\n\n        // Toggle state\n        window.bosExpandedState[key] = !isExpanded;\n\n        // Update DOM\n        var childrenDiv = accordionItem.querySelector('.accordion-children');\n        var icon = accordionItem.querySelector('.expand-icon');\n\n        if (window.bosExpandedState[key]) {\n            if (childrenDiv) childrenDiv.classList.add('expanded');\n            if (icon) icon.classList.add('expanded');\n        } else {\n            if (childrenDiv) childrenDiv.classList.remove('expanded');\n            if (icon) icon.classList.remove('expanded');\n        }\n    };\n\n    // Navigate to service detail dashboard (Splunk variant)\n    window.navigateToServiceDetail = function(serviceId) {\n        window.location.href = '/d/exec-l3-service-detail-splunk-v1/service-detail?var-service_id=' + encodeURIComponent(serviceId);\n    };\n\n    // Helper function to render sparkline\n    window.renderSparkline = function(statusClass) {\n        var html = '';\n        for (var j = 0; j < 12; j++) {\n            html += '<div class=\"sparkline-bar ' + statusClass + '\"></div>';\n        }\n        return html;\n    };\n\n    // Helper function to render RAG badges\n    window.renderRAGBadges = function(redCount, amberCount, greenCount) {\n        var html = '';\n        if (redCount > 0) {\n            html += '<span class=\"rag-badge critical\">' + redCount + ' Red</span>';\n        }\n        if (amberCount > 0) {\n            html += '<span class=\"rag-badge degraded\">' + amberCount + ' Amber</span>';\n        }\n        if (greenCount > 0) {\n            html += '<span class=\"rag-badge healthy\">' + greenCount + ' Green</span>';\n        }\n        if (!html) {\n            html = '<span style=\"color: #6B7280;\">0</span>';\n        }\n        return html;\n    };\n\n    // Parse query data into structured format\n    window.parseHierarchyData = function(queryData) {\n        if (!queryData || queryData.length < 3) {\n            return null;\n        }\n\n        var l4Series = queryData[0];\n        var l3Series = queryData[1];\n        var servicesSeries = queryData[2];\n\n        // Parse L4 data\n        var l4Data = [];\n        if (l4Series && l4Series.fields) {\n            var l4FieldMap = {};\n            l4Series.fields.forEach(function(field, index) {\n                l4FieldMap[field.name] = index;\n            });\n            var l4Values = l4Series.fields.map(function(f) { return f.values.buffer || f.values || []; });\n            var l4RowCount = l4Values[0] ? l4Values[0].length : 0;\n\n            for (var i = 0; i < l4RowCount; i++) {\n                l4Data.push({\n                    name: l4Values[l4FieldMap['l4_product_line']][i],\n                    healthStatus: l4Values[l4FieldMap['health_status']][i],\n                    redCount: l4Values[l4FieldMap['red_count']][i] || 0,\n                    amberCount: l4Values[l4FieldMap['amber_count']][i] || 0,\n                    greenCount: l4Values[l4FieldMap['green_count']][i] || 0\n                });\n            }\n        }\n\n        // Parse L3 data\n        var l3Data = [];\n        if (l3Series && l3Series.fields) {\n            var l3FieldMap = {};\n            l3Series.fields.forEach(function(field, index) {\n                l3FieldMap[field.name] = index;\n            });\n            var l3Values = l3Series.fields.map(function(f) { return f.values.buffer || f.values || []; });\n            var l3RowCount = l3Values[0] ? l3Values[0].length : 0;\n\n            for (var i = 0; i < l3RowCount; i++) {\n                l3Data.push({\n                    l4Parent: l3Values[l3FieldMap['l4_product_line']][i],\n                    name: l3Values[l3FieldMap['l3_product']][i],\n                    healthStatus: l3Values[l3FieldMap['health_status']][i],\n                    redCount: l3Values[l3FieldMap['red_count']][i] || 0,\n                    amberCount: l3Values[l3FieldMap['amber_count']][i] || 0,\n                    greenCount: l3Values[l3FieldMap['green_count']][i] || 0\n                });\n            }\n        }\n\n        // Parse Services data\n        var servicesData = [];\n        if (servicesSeries && servicesSeries.fields) {\n            var svcFieldMap = {};\n            servicesSeries.fields.forEach(function(field, index) {\n                svcFieldMap[field.name] = index;\n            });\n            var svcValues = servicesSeries.fields.map(function(f) { return f.values.buffer || f.values || []; });\n            var svcRowCount = svcValues[0] ? svcValues[0].length : 0;\n\n            for (var i = 0; i < svcRowCount; i++) {\n                servicesData.push({\n                    l4Parent: svcValues[svcFieldMap['l4_product_line']][i],\n                    l3Parent: svcValues[svcFieldMap['l3_product']][i],\n                    serviceId: svcValues[svcFieldMap['service_id']][i],\n                    name: svcValues[svcFieldMap['service_name']][i],\n                    healthStatus: svcValues[svcFieldMap['health_status']][i],\n                    redCount: svcValues[svcFieldMap['red_count']][i] || 0,\n                    amberCount: svcValues[svcFieldMap['amber_count']][i] || 0,\n                    greenCount: svcValues[svcFieldMap['green_count']][i] || 0\n                });\n            }\n        }\n\n        return { l4: l4Data, l3: l3Data, services: servicesData };\n    };\n\n    // Render accordion dashboard\n    window.bosRenderDashboard = function() {\n        var accordionBody = htmlNode.querySelector('#accordionBody');\n        var drawerContent = htmlNode.querySelector('#drawerContent');\n\n        if (!accordionBody) {\n            console.error('Accordion body not found');\n            return;\n        }\n\n        // Show loading\n        accordionBody.innerHTML = '<div class=\"loading\">Loading...</div>';\n\n        // Get data from Grafana\n        var queryData = null;\n        if (typeof data !== 'undefined' && data && data.series) {\n            queryData = data.series;\n        } else if (typeof htmlGraphics !== 'undefined' && htmlGraphics.data && htmlGraphics.data.series) {\n            queryData = htmlGraphics.data.series;\n        }\n\n        if (!queryData || queryData.length < 3) {\n            accordionBody.innerHTML = '<div class=\"error\">No data available (need 3 queries)</div>';\n            return;\n        }\n\n        // Parse all hierarchy data\n        var parsedData = window.parseHierarchyData(queryData);\n        if (!parsedData) {\n            accordionBody.innerHTML = '<div class=\"error\">Failed to parse data</div>';\n            return;\n        }\n\n        // Update drawer content\n        if (drawerContent) {\n            drawerContent.innerHTML =\n                '<h3>Purpose</h3>' +\n                '<p>Hierarchical accordion view of all product lines, products, and services.</p>' +\n                '<h3>How to Use</h3>' +\n                '<ul>' +\n                '<li>Click L4 Product Line to expand/collapse L3 Products</li>' +\n                '<li>Click L3 Product to expand/collapse Services</li>' +\n                '<li>Click Service to view detailed metrics</li>' +\n                '<li>Sparklines show 12-hour health trend</li>' +\n                '<li>RAG badges show child item counts by status</li>' +\n                '</ul>';\n        }\n\n        // Build accordion HTML\n        var html = '';\n\n        parsedData.l4.forEach(function(l4Item) {\n            var statusClass = l4Item.healthStatus === 'Green' ? 'healthy' :\n                             l4Item.healthStatus === 'Amber' ? 'degraded' :\n                             'critical';\n\n            // L4 accordion item\n            html += '<div class=\"accordion-item\" data-level=\"l4\" data-id=\"' + l4Item.name + '\" data-status=\"' + l4Item.healthStatus + '\">';\n            html += '  <div class=\"accordion-header\">';\n            html += '    <div class=\"name-cell\">';\n            html += '      <span class=\"expand-icon\">▶</span>';\n            html += '      <div class=\"item-name\">' + l4Item.name + '</div>';\n            html += '    </div>';\n            html += '    <div class=\"status-cell\">';\n            html += '      <div class=\"status-dot ' + statusClass + '\"></div>';\n            html += '      <span class=\"status-text ' + statusClass + '\">' + l4Item.healthStatus + '</span>';\n            html += '    </div>';\n            html += '    <div class=\"sparkline-cell\">' + window.renderSparkline(statusClass) + '</div>';\n            html += '    <div class=\"rag-cell\">' + window.renderRAGBadges(l4Item.redCount, l4Item.amberCount, l4Item.greenCount) + '</div>';\n            html += '  </div>';\n\n            // L3 children container\n            html += '  <div class=\"accordion-children\">';\n\n            // Find L3 children for this L4\n            var l3Children = parsedData.l3.filter(function(l3) { return l3.l4Parent === l4Item.name; });\n\n            l3Children.forEach(function(l3Item) {\n                var l3StatusClass = l3Item.healthStatus === 'Green' ? 'healthy' :\n                                   l3Item.healthStatus === 'Amber' ? 'degraded' :\n                                   'critical';\n\n                // L3 accordion item\n                html += '    <div class=\"accordion-item\" data-level=\"l3\" data-id=\"' + l3Item.name + '\" data-parent=\"' + l4Item.name + '\" data-status=\"' + l3Item.healthStatus + '\">';\n                html += '      <div class=\"accordion-header\">';\n                html += '        <div class=\"name-cell\">';\n                html += '          <span class=\"expand-icon\">▶</span>';\n                html += '          <div class=\"item-name\">' + l3Item.name + '</div>';\n                html += '        </div>';\n                html += '        <div class=\"status-cell\">';\n                html += '          <div class=\"status-dot ' + l3StatusClass + '\"></div>';\n                html += '          <span class=\"status-text ' + l3StatusClass + '\">' + l3Item.healthStatus + '</span>';\n                html += '        </div>';\n                html += '        <div class=\"sparkline-cell\">' + window.renderSparkline(l3StatusClass) + '</div>';\n                html += '        <div class=\"rag-cell\">' + window.renderRAGBadges(l3Item.redCount, l3Item.amberCount, l3Item.greenCount) + '</div>';\n                html += '      </div>';\n\n                // Service children container\n                html += '      <div class=\"accordion-children\">';\n\n                // Find Service children for this L3\n                var serviceChildren = parsedData.services.filter(function(svc) {\n                    return svc.l4Parent === l4Item.name && svc.l3Parent === l3Item.name;\n                });\n\n                serviceChildren.forEach(function(svcItem) {\n                    var svcStatusClass = svcItem.healthStatus === 'Green' ? 'healthy' :\n                                        svcItem.healthStatus === 'Amber' ? 'degraded' :\n                                        'critical';\n\n                    // Service item (leaf node)\n                    html += '        <div class=\"accordion-item\" data-level=\"service\" data-id=\"' + svcItem.serviceId + '\" data-service-id=\"' + svcItem.serviceId + '\" data-status=\"' + svcItem.healthStatus + '\">';\n                    html += '          <div class=\"accordion-header\">';\n                    html += '            <div class=\"name-cell\">';\n                    html += '              <span class=\"expand-icon\">▶</span>';\n                    html += '              <div class=\"item-name\">' + svcItem.name + '</div>';\n                    html += '            </div>';\n                    html += '            <div class=\"status-cell\">';\n                    html += '              <div class=\"status-dot ' + svcStatusClass + '\"></div>';\n                    html += '              <span class=\"status-text ' + svcStatusClass + '\">' + svcItem.healthStatus + '</span>';\n                    html += '            </div>';\n                    html += '            <div class=\"sparkline-cell\">' + window.renderSparkline(svcStatusClass) + '</div>';\n                    html += '            <div class=\"rag-cell\">' + window.renderRAGBadges(svcItem.redCount, svcItem.amberCount, svcItem.greenCount) + '</div>';\n                    html += '          </div>';\n                    html += '        </div>';\n                });\n\n                html += '      </div>'; // End L3 children\n                html += '    </div>'; // End L3 item\n            });\n\n            html += '  </div>'; // End L4 children\n            html += '</div>'; // End L4 item\n        });\n\n        accordionBody.innerHTML = html;\n\n        // Add event delegation for accordion clicks\n        var accordionHeaders = accordionBody.querySelectorAll('.accordion-header');\n        accordionHeaders.forEach(function(header) {\n            header.addEventListener('click', function(e) {\n                var accordionItem = header.closest('.accordion-item');\n                if (!accordionItem) return;\n\n                var level = accordionItem.getAttribute('data-level');\n\n                // Service items navigate instead of expanding\n                if (level === 'service') {\n                    var serviceId = accordionItem.getAttribute('data-service-id');\n                    if (serviceId) {\n                        window.navigateToServiceDetail(serviceId);\n                    }\n                } else {\n                    // L4 and L3 items expand/collapse\n                    window.toggleExpand(accordionItem);\n                }\n            });\n        });\n    };\n\n    // Event listeners for drawer\n    var guideIcon = htmlNode.querySelector('#guideIcon');\n    var overlay = htmlNode.querySelector('#overlay');\n    var closeBtn = htmlNode.querySelector('#closeBtn');\n\n    if (guideIcon) {\n        guideIcon.addEventListener('click', window.toggleGuide);\n    }\n    if (overlay) {\n        overlay.addEventListener('click', window.closeGuide);\n    }\n    if (closeBtn) {\n        closeBtn.addEventListener('click', window.closeGuide);\n    }\n\n    // Initial render\n    window.bosRenderDashboard();\n}\n",
          "renderOnMount": true
        },
        "pluginVersion": "2.2.1"
      }
    ],
    "refresh": "30s",
    "schemaVersion": 39,
    "tags": [
      "executive",
      "unified",
      "hierarchy",
      "bos",
      "experimental",
      "splunk",
      "accordion"
    ],
    "templating": {
      "list": []
    },
    "time": {
      "from": "now-2h",
      "to": "now"
    },
    "timepicker": {},
    "timezone": "",
    "title": "BOS: Unified Hierarchy - Accordion (Experimental)",
    "uid": "bos-exec-unified-splunk",
    "version": 0,
    "weekStart": ""
  }
}