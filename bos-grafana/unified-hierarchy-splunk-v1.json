{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": null,
  "links": [],
  "panels": [
    {
      "id": 1,
      "type": "gapit-htmlgraphics-panel",
      "title": "Unified Hierarchy",
      "transparent": true,
      "gridPos": {
        "h": 24,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "datasource": {
        "type": "grafana-splunk-datasource",
        "uid": "d4c682f8-fd9b-46b2-9b89-e15410aa52dc"
      },
      "targets": [
        {
          "datasource": {
            "type": "grafana-splunk-datasource",
            "uid": "d4c682f8-fd9b-46b2-9b89-e15410aa52dc"
          },
          "query": "| inputlookup bos_services.csv\n| lookup bos_signal_status.csv service_id OUTPUT status\n| eval status_value=case(\n    status==\"Green\", 3,\n    status==\"Amber\", 2,\n    status==\"Red\", 1,\n    1=1, null())\n| stats min(status_value) as service_min_status by l4_product_line, l3_product\n| stats\n    count as total_l3\n    sum(eval(service_min_status==1)) as red_count\n    sum(eval(service_min_status==2)) as amber_count\n    sum(eval(service_min_status==3)) as green_count\n    min(service_min_status) as overall_min_status\n    by l4_product_line\n| eval red_count=coalesce(red_count, 0)\n| eval amber_count=coalesce(amber_count, 0)\n| eval green_count=coalesce(green_count, 0)\n| eval health_status=case(\n    overall_min_status==3, \"Green\",\n    overall_min_status==2, \"Amber\",\n    overall_min_status==1, \"Red\",\n    1=1, \"Unknown\")\n| table l4_product_line red_count amber_count green_count health_status\n| sort l4_product_line",
          "refId": "A",
          "rawQuery": true
        },
        {
          "datasource": {
            "type": "grafana-splunk-datasource",
            "uid": "d4c682f8-fd9b-46b2-9b89-e15410aa52dc"
          },
          "query": "| inputlookup bos_services.csv\n| search l4_product_line=\"$l4_selected\"\n| lookup bos_signal_status.csv service_id OUTPUT status\n| eval status_value=case(\n    status==\"Green\", 3,\n    status==\"Amber\", 2,\n    status==\"Red\", 1,\n    1=1, null())\n| stats min(status_value) as service_min_status by l3_product, service_id\n| stats\n    count as total_services\n    sum(eval(service_min_status==1)) as red_count\n    sum(eval(service_min_status==2)) as amber_count\n    sum(eval(service_min_status==3)) as green_count\n    min(service_min_status) as overall_min_status\n    by l3_product\n| eval red_count=coalesce(red_count, 0)\n| eval amber_count=coalesce(amber_count, 0)\n| eval green_count=coalesce(green_count, 0)\n| eval health_status=case(\n    overall_min_status==3, \"Green\",\n    overall_min_status==2, \"Amber\",\n    overall_min_status==1, \"Red\",\n    1=1, \"Unknown\")\n| table l3_product red_count amber_count green_count health_status\n| sort l3_product",
          "refId": "B",
          "rawQuery": true
        },
        {
          "datasource": {
            "type": "grafana-splunk-datasource",
            "uid": "d4c682f8-fd9b-46b2-9b89-e15410aa52dc"
          },
          "query": "| inputlookup bos_services.csv\n| search l4_product_line=\"$l4_selected\" l3_product=\"$l3_selected\"\n| join type=left service_id\n    [| inputlookup bos_signal_status.csv\n     | stats\n         sum(eval(status==\"Red\")) as red_count\n         sum(eval(status==\"Amber\")) as amber_count\n         sum(eval(status==\"Green\")) as green_count\n         min(case(status==\"Green\", 3, status==\"Amber\", 2, status==\"Red\", 1)) as min_status\n         by service_id]\n| eval red_count=coalesce(red_count, 0)\n| eval amber_count=coalesce(amber_count, 0)\n| eval green_count=coalesce(green_count, 0)\n| eval min_status=coalesce(min_status, 3)\n| eval health_status=case(\n    min_status==3, \"Green\",\n    min_status==2, \"Amber\",\n    min_status==1, \"Red\",\n    1=1, \"Unknown\")\n| rename displayName as service_name\n| table service_id service_name red_count amber_count green_count health_status\n| sort service_name",
          "refId": "C",
          "rawQuery": true
        }
      ],
      "options": {
        "SVGBaseFix": true,
        "css": "\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    background-color: #F3F4F6;\n    color: #111827;\n    line-height: 1.6;\n    margin: 0;\n    padding: 0;\n    height: 100%;\n    overflow: hidden;\n}\n\n.dashboard-wrapper {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    background-color: #F3F4F6;\n}\n\n.dashboard-header {\n    background-color: #D71E28;\n    color: white;\n    padding: 0.75rem 1.5rem;\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    flex-shrink: 0;\n}\n\n.dashboard-header h1 {\n    font-size: 1.5rem;\n    font-weight: 700;\n}\n\n.header-right {\n    display: flex;\n    align-items: center;\n    gap: 1.5rem;\n}\n\n.timestamp {\n    font-size: 0.75rem;\n    opacity: 0.9;\n}\n\n.guide-icon {\n    font-size: 1.25rem;\n    cursor: pointer;\n    opacity: 0.9;\n    transition: opacity 0.2s;\n}\n\n.guide-icon:hover {\n    opacity: 1;\n}\n\n.quick-reference {\n    position: fixed;\n    top: 0;\n    right: -500px;\n    width: 480px;\n    height: 100%;\n    background: white;\n    box-shadow: -4px 0 16px rgba(0,0,0,0.2);\n    z-index: 1000;\n    transition: right 0.3s ease;\n    overflow-y: auto;\n}\n\n.quick-reference.visible {\n    right: 0;\n}\n\n.quick-reference .header {\n    position: sticky;\n    top: 0;\n    background: white;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 1.5rem;\n    border-bottom: 2px solid #D71E28;\n    z-index: 10;\n}\n\n.quick-reference h2 {\n    font-size: 1.25rem;\n    color: #111827;\n}\n\n.close-btn {\n    cursor: pointer;\n    font-size: 1.5rem;\n    color: #6B7280;\n}\n\n.close-btn:hover {\n    color: #111827;\n}\n\n.quick-reference .content {\n    padding: 1.5rem;\n    color: #374151;\n    line-height: 1.8;\n}\n\n.quick-reference .content h3 {\n    color: #111827;\n    font-size: 1rem;\n    margin-top: 1.5rem;\n    margin-bottom: 0.5rem;\n}\n\n.quick-reference .content p {\n    margin-bottom: 1rem;\n}\n\n.quick-reference .content ul {\n    margin-left: 1.5rem;\n    margin-bottom: 1rem;\n}\n\n.guide-overlay {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(0,0,0,0.3);\n    z-index: 999;\n}\n\n.guide-overlay.visible {\n    display: block;\n}\n\n.breadcrumb {\n    background: white;\n    padding: 0.75rem 1.5rem;\n    border-bottom: 1px solid #E5E7EB;\n    font-size: 0.875rem;\n    flex-shrink: 0;\n}\n\n.breadcrumb-link {\n    color: #D71E28;\n    cursor: pointer;\n    text-decoration: underline;\n}\n\n.breadcrumb-link:hover {\n    opacity: 0.8;\n}\n\n.breadcrumb-separator {\n    margin: 0 0.5rem;\n    color: #6B7280;\n}\n\n.breadcrumb-current {\n    color: #111827;\n    font-weight: 500;\n}\n\n.container {\n    flex: 1;\n    overflow-y: auto;\n    padding: 1.5rem;\n}\n\n.hierarchy-list {\n    background: white;\n    border-radius: 0.5rem;\n    box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n    overflow: hidden;\n}\n\n.list-header {\n    display: grid;\n    grid-template-columns: 2fr 1fr 2fr 1.5fr;\n    gap: 1rem;\n    padding: 0.75rem 1.5rem;\n    background: #F3F4F6;\n    border-bottom: 2px solid #E5E7EB;\n    font-weight: 600;\n    font-size: 0.75rem;\n    text-transform: uppercase;\n    color: #374151;\n}\n\n.hierarchy-row {\n    display: grid;\n    grid-template-columns: 2fr 1fr 2fr 1.5fr;\n    gap: 1rem;\n    padding: 0.75rem 1.5rem;\n    border-bottom: 1px solid #E5E7EB;\n    cursor: pointer;\n    transition: background 0.2s;\n    align-items: center;\n}\n\n.hierarchy-row:hover {\n    background: #F3F4F6;\n}\n\n.hierarchy-row:last-child {\n    border-bottom: none;\n}\n\n.name-cell {\n    display: flex;\n    align-items: center;\n    gap: 0.75rem;\n}\n\n.status-indicator {\n    width: 4px;\n    height: 40px;\n    border-radius: 2px;\n    flex-shrink: 0;\n}\n\n.status-indicator.healthy { background: #10B981; }\n.status-indicator.degraded { background: #F59E0B; }\n.status-indicator.critical { background: #EF4444; }\n\n.item-name {\n    font-weight: 600;\n    color: #111827;\n}\n\n.status-cell {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.status-dot {\n    width: 12px;\n    height: 12px;\n    border-radius: 50%;\n    flex-shrink: 0;\n}\n\n.status-dot.healthy { background: #10B981; }\n.status-dot.degraded { background: #F59E0B; }\n.status-dot.critical { background: #EF4444; }\n\n.status-text {\n    font-size: 0.875rem;\n    font-weight: 500;\n}\n\n.status-text.healthy { color: #10B981; }\n.status-text.degraded { color: #F59E0B; }\n.status-text.critical { color: #EF4444; }\n\n.sparkline-cell {\n    display: flex;\n    gap: 2px;\n    height: 24px;\n    align-items: flex-end;\n}\n\n.sparkline-bar {\n    flex: 1;\n    min-width: 3px;\n    height: 24px;\n    border-radius: 1px;\n}\n\n.sparkline-bar.healthy { background: #10B981; }\n.sparkline-bar.degraded { background: #F59E0B; }\n.sparkline-bar.critical { background: #EF4444; }\n\n.rag-cell {\n    display: flex;\n    gap: 0.5rem;\n    font-size: 0.875rem;\n    flex-wrap: wrap;\n}\n\n.rag-badge {\n    padding: 0.25rem 0.5rem;\n    border-radius: 0.25rem;\n    font-size: 0.75rem;\n    font-weight: 600;\n    white-space: nowrap;\n}\n\n.rag-badge.critical {\n    background: #FEE2E2;\n    color: #991B1B;\n}\n\n.rag-badge.degraded {\n    background: #FEF3C7;\n    color: #92400E;\n}\n\n.rag-badge.healthy {\n    background: #D1FAE5;\n    color: #065F46;\n}\n\n.loading, .error {\n    text-align: center;\n    padding: 2rem;\n    color: #6B7280;\n}\n\n.footer {\n    flex-shrink: 0;\n    padding: 0.75rem 1.5rem;\n    text-align: center;\n    font-size: 0.75rem;\n    color: #6B7280;\n    border-top: 1px solid #E5E7EB;\n    background: white;\n}\n",
        "html": "\n<div class=\"dashboard-wrapper\">\n    <div class=\"dashboard-header\">\n        <h1>BOS Unified Hierarchy (Experimental)</h1>\n        <div class=\"header-right\">\n            <div class=\"timestamp\" id=\"timestamp\"></div>\n            <div class=\"guide-icon\" id=\"guideIcon\">ℹ️</div>\n        </div>\n    </div>\n\n    <div class=\"breadcrumb\" id=\"breadcrumb\">\n        <span class=\"breadcrumb-current\">Home</span>\n    </div>\n\n    <div class=\"container\">\n        <div class=\"hierarchy-list\">\n            <div class=\"list-header\" id=\"listHeader\">\n                <div>L4 Product Line</div>\n                <div>Status</div>\n                <div>Last 12 Hours</div>\n                <div>L3 Products</div>\n            </div>\n            <div id=\"tableBody\">\n                <div class=\"loading\">Loading data...</div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"footer\">\n        <strong>BOS Dashboard System</strong> | Generated: 2025-10-07 13:55:18 | Schema: v2.2 | Commit: 5ac6931 | Generator: generate-unified-hierarchy-splunk.js | EXPERIMENTAL\n    </div>\n</div>\n\n<div class=\"guide-overlay\" id=\"overlay\"></div>\n<div class=\"quick-reference\" id=\"drawer\">\n    <div class=\"header\">\n        <h2>Dashboard Guide</h2>\n        <span class=\"close-btn\" id=\"closeBtn\">×</span>\n    </div>\n    <div class=\"content\" id=\"drawerContent\">\n        <h3>Purpose</h3>\n        <p>Unified hierarchical navigation dashboard for BOS executive views.</p>\n    </div>\n</div>\n\n<script>\n// Update timestamp\nif (typeof Date !== 'undefined') {\n    var timestampEl = document.getElementById('timestamp');\n    if (timestampEl) {\n        var d = new Date();\n        timestampEl.textContent = 'Updated: ' + d.toISOString().slice(0, 16).replace('T', ' ');\n    }\n}\n</script>\n",
        "onRender": "\n// State management for hierarchical navigation\nif (typeof window !== 'undefined' && typeof htmlNode !== 'undefined') {\n    // Initialize state from URL parameters (for deep linking)\n    if (!window.bosHierarchyState) {\n        var urlParams = new URLSearchParams(window.location.search);\n        var l4Param = urlParams.get('var-l4_selected');\n        var l3Param = urlParams.get('var-l3_selected');\n\n        var initialLevel = 'l4';\n        if (l3Param) {\n            initialLevel = 'services';\n        } else if (l4Param) {\n            initialLevel = 'l3';\n        }\n\n        window.bosHierarchyState = {\n            level: initialLevel,\n            l4_selected: l4Param || null,\n            l3_selected: l3Param || null\n        };\n    }\n\n    // Drawer functions\n    window.toggleGuide = function() {\n        var drawer = htmlNode.querySelector('#drawer');\n        var overlay = htmlNode.querySelector('#overlay');\n        if (drawer && overlay) {\n            drawer.classList.toggle('visible');\n            overlay.classList.toggle('visible');\n        }\n    };\n\n    window.closeGuide = function() {\n        var drawer = htmlNode.querySelector('#drawer');\n        var overlay = htmlNode.querySelector('#overlay');\n        if (drawer && overlay) {\n            drawer.classList.remove('visible');\n            overlay.classList.remove('visible');\n        }\n    };\n\n    // Navigation functions\n    window.navigateToL3 = function(l4Name) {\n        window.bosHierarchyState.level = 'l3';\n        window.bosHierarchyState.l4_selected = l4Name;\n        window.bosHierarchyState.l3_selected = null;\n\n        // Update Grafana template variables and reload\n        var url = new URL(window.location.href);\n        url.searchParams.set('var-l4_selected', l4Name);\n        url.searchParams.delete('var-l3_selected');\n        window.location.href = url.toString();\n    };\n\n    window.navigateToServices = function(l3Name) {\n        window.bosHierarchyState.level = 'services';\n        window.bosHierarchyState.l3_selected = l3Name;\n\n        // Update Grafana template variables and reload\n        var url = new URL(window.location.href);\n        url.searchParams.set('var-l3_selected', l3Name);\n        window.location.href = url.toString();\n    };\n\n    window.navigateToL4 = function() {\n        window.bosHierarchyState.level = 'l4';\n        window.bosHierarchyState.l4_selected = null;\n        window.bosHierarchyState.l3_selected = null;\n\n        // Clear Grafana template variables and reload\n        var url = new URL(window.location.href);\n        url.searchParams.delete('var-l4_selected');\n        url.searchParams.delete('var-l3_selected');\n        window.location.href = url.toString();\n    };\n\n    window.navigateToServiceDetail = function(serviceId) {\n        // Navigate to Splunk service detail dashboard\n        window.location.href = '/d/exec-l3-service-detail-splunk-v1/service-detail-splunk?var-service_id=' + encodeURIComponent(serviceId);\n    };\n\n    // Render dashboard based on state\n    window.bosRenderDashboard = function() {\n        var state = window.bosHierarchyState;\n        var tableBody = htmlNode.querySelector('#tableBody');\n        var listHeader = htmlNode.querySelector('#listHeader');\n        var breadcrumb = htmlNode.querySelector('#breadcrumb');\n        var drawerContent = htmlNode.querySelector('#drawerContent');\n\n        if (!tableBody || !listHeader || !breadcrumb) {\n            console.error('Required elements not found');\n            return;\n        }\n\n        // Show loading\n        tableBody.innerHTML = '<div class=\"loading\">Loading...</div>';\n\n        // Get data based on level\n        var queryData = null;\n        if (typeof data !== 'undefined' && data && data.series) {\n            queryData = data.series;\n        } else if (typeof htmlGraphics !== 'undefined' && htmlGraphics.data && htmlGraphics.data.series) {\n            queryData = htmlGraphics.data.series;\n        }\n\n        if (!queryData || queryData.length === 0) {\n            tableBody.innerHTML = '<div class=\"error\">No data available</div>';\n            return;\n        }\n\n        // Select correct query based on level\n        var seriesIndex = 0;\n        if (state.level === 'l3') seriesIndex = 1;\n        if (state.level === 'services') seriesIndex = 2;\n\n        if (!queryData[seriesIndex]) {\n            tableBody.innerHTML = '<div class=\"error\">Data not available for this level</div>';\n            return;\n        }\n\n        var series = queryData[seriesIndex];\n        var fields = series.fields;\n\n        if (!fields || fields.length === 0) {\n            tableBody.innerHTML = '<div class=\"error\">No fields in data</div>';\n            return;\n        }\n\n        // Build field map\n        var fieldMap = {};\n        fields.forEach(function(field, index) {\n            fieldMap[field.name] = index;\n        });\n\n        // Get values arrays\n        var values = fields.map(function(f) { return f.values.buffer || f.values || []; });\n        var rowCount = values[0] ? values[0].length : 0;\n\n        if (rowCount === 0) {\n            tableBody.innerHTML = '<div class=\"error\">No data found</div>';\n            return;\n        }\n\n        // Update breadcrumb\n        if (state.level === 'l4') {\n            breadcrumb.innerHTML = '<span class=\"breadcrumb-current\">Home</span>';\n        } else if (state.level === 'l3') {\n            breadcrumb.innerHTML =\n                '<span class=\"breadcrumb-link\" data-nav=\"l4\">Home</span>' +\n                '<span class=\"breadcrumb-separator\">></span>' +\n                '<span class=\"breadcrumb-current\">' + state.l4_selected + '</span>';\n        } else if (state.level === 'services') {\n            breadcrumb.innerHTML =\n                '<span class=\"breadcrumb-link\" data-nav=\"l4\">Home</span>' +\n                '<span class=\"breadcrumb-separator\">></span>' +\n                '<span class=\"breadcrumb-link\" data-nav=\"l3\">' + state.l4_selected + '</span>' +\n                '<span class=\"breadcrumb-separator\">></span>' +\n                '<span class=\"breadcrumb-current\">' + state.l3_selected + '</span>';\n        }\n\n        // Update header\n        if (state.level === 'l4') {\n            listHeader.innerHTML =\n                '<div>L4 Product Line</div>' +\n                '<div>Status</div>' +\n                '<div>Last 12 Hours</div>' +\n                '<div>L3 Products</div>';\n        } else if (state.level === 'l3') {\n            listHeader.innerHTML =\n                '<div>L3 Product</div>' +\n                '<div>Status</div>' +\n                '<div>Last 12 Hours</div>' +\n                '<div>Services</div>';\n        } else if (state.level === 'services') {\n            listHeader.innerHTML =\n                '<div>Service</div>' +\n                '<div>Status</div>' +\n                '<div>Last 12 Hours</div>' +\n                '<div>Signals</div>';\n        }\n\n        // Update drawer content\n        if (drawerContent) {\n            if (state.level === 'l4') {\n                drawerContent.innerHTML =\n                    '<h3>Purpose</h3>' +\n                    '<p>Top-level view of all product lines.</p>' +\n                    '<h3>How to Use</h3>' +\n                    '<ul>' +\n                    '<li>Click any product line to view its L3 products</li>' +\n                    '<li>Sparklines show 12-hour health trend</li>' +\n                    '<li>RAG counts show number of L3 products in each status</li>' +\n                    '</ul>';\n            } else if (state.level === 'l3') {\n                drawerContent.innerHTML =\n                    '<h3>Purpose</h3>' +\n                    '<p>Viewing L3 products within ' + state.l4_selected + '.</p>' +\n                    '<h3>How to Use</h3>' +\n                    '<ul>' +\n                    '<li>Click any product to view its services</li>' +\n                    '<li>Click \"Home\" in breadcrumb to return to L4 view</li>' +\n                    '<li>RAG counts show number of services in each status</li>' +\n                    '</ul>';\n            } else if (state.level === 'services') {\n                drawerContent.innerHTML =\n                    '<h3>Purpose</h3>' +\n                    '<p>Viewing services within ' + state.l3_selected + '.</p>' +\n                    '<h3>How to Use</h3>' +\n                    '<ul>' +\n                    '<li>Click any service to view detailed metrics</li>' +\n                    '<li>Click breadcrumb to navigate back</li>' +\n                    '<li>RAG counts show number of signals in each status</li>' +\n                    '</ul>';\n            }\n        }\n\n        // Build table rows\n        var tableHTML = '';\n\n        for (var i = 0; i < rowCount; i++) {\n            var name, healthStatus, redCount, amberCount, greenCount;\n            var itemId = null;\n\n            if (state.level === 'l4') {\n                name = values[fieldMap['l4_product_line']] ? values[fieldMap['l4_product_line']][i] : 'Unknown';\n                healthStatus = values[fieldMap['health_status']] ? values[fieldMap['health_status']][i] : 'Unknown';\n                redCount = values[fieldMap['red_count']] ? values[fieldMap['red_count']][i] : 0;\n                amberCount = values[fieldMap['amber_count']] ? values[fieldMap['amber_count']][i] : 0;\n                greenCount = values[fieldMap['green_count']] ? values[fieldMap['green_count']][i] : 0;\n            } else if (state.level === 'l3') {\n                name = values[fieldMap['l3_product']] ? values[fieldMap['l3_product']][i] : 'Unknown';\n                healthStatus = values[fieldMap['health_status']] ? values[fieldMap['health_status']][i] : 'Unknown';\n                redCount = values[fieldMap['red_count']] ? values[fieldMap['red_count']][i] : 0;\n                amberCount = values[fieldMap['amber_count']] ? values[fieldMap['amber_count']][i] : 0;\n                greenCount = values[fieldMap['green_count']] ? values[fieldMap['green_count']][i] : 0;\n            } else if (state.level === 'services') {\n                itemId = values[fieldMap['service_id']] ? values[fieldMap['service_id']][i] : null;\n                name = values[fieldMap['service_name']] ? values[fieldMap['service_name']][i] : 'Unknown';\n                healthStatus = values[fieldMap['health_status']] ? values[fieldMap['health_status']][i] : 'Unknown';\n                redCount = values[fieldMap['red_count']] ? values[fieldMap['red_count']][i] : 0;\n                amberCount = values[fieldMap['amber_count']] ? values[fieldMap['amber_count']][i] : 0;\n                greenCount = values[fieldMap['green_count']] ? values[fieldMap['green_count']][i] : 0;\n            }\n\n            var statusClass = healthStatus === 'Green' ? 'healthy' :\n                             healthStatus === 'Amber' ? 'degraded' :\n                             'critical';\n\n            // Sparkline\n            var sparklineHTML = '';\n            for (var j = 0; j < 12; j++) {\n                sparklineHTML += '<div class=\"sparkline-bar ' + statusClass + '\"></div>';\n            }\n\n            // RAG badges\n            var ragHTML = '';\n            if (redCount > 0) {\n                ragHTML += '<span class=\"rag-badge critical\">' + redCount + ' Red</span>';\n            }\n            if (amberCount > 0) {\n                ragHTML += '<span class=\"rag-badge degraded\">' + amberCount + ' Amber</span>';\n            }\n            if (greenCount > 0) {\n                ragHTML += '<span class=\"rag-badge healthy\">' + greenCount + ' Green</span>';\n            }\n            if (!ragHTML) {\n                ragHTML = '<span style=\"color: #6B7280;\">0</span>';\n            }\n\n            // Data attributes for navigation\n            var dataAttr = '';\n            if (state.level === 'l4') {\n                dataAttr = 'data-l4=\"' + encodeURIComponent(name) + '\"';\n            } else if (state.level === 'l3') {\n                dataAttr = 'data-l3=\"' + encodeURIComponent(name) + '\"';\n            } else if (state.level === 'services') {\n                dataAttr = 'data-service-id=\"' + encodeURIComponent(itemId) + '\"';\n            }\n\n            tableHTML +=\n                '<div class=\"hierarchy-row\" ' + dataAttr + '>' +\n                    '<div class=\"name-cell\">' +\n                        '<div class=\"status-indicator ' + statusClass + '\"></div>' +\n                        '<div class=\"item-name\">' + name + '</div>' +\n                    '</div>' +\n                    '<div class=\"status-cell\">' +\n                        '<div class=\"status-dot ' + statusClass + '\"></div>' +\n                        '<span class=\"status-text ' + statusClass + '\">' + healthStatus + '</span>' +\n                    '</div>' +\n                    '<div class=\"sparkline-cell\">' + sparklineHTML + '</div>' +\n                    '<div class=\"rag-cell\">' + ragHTML + '</div>' +\n                '</div>';\n        }\n\n        tableBody.innerHTML = tableHTML;\n    };\n\n    // Event listeners\n    var guideIcon = htmlNode.querySelector('#guideIcon');\n    var overlay = htmlNode.querySelector('#overlay');\n    var closeBtn = htmlNode.querySelector('#closeBtn');\n\n    if (guideIcon) {\n        guideIcon.addEventListener('click', window.toggleGuide);\n    }\n    if (overlay) {\n        overlay.addEventListener('click', window.closeGuide);\n    }\n    if (closeBtn) {\n        closeBtn.addEventListener('click', window.closeGuide);\n    }\n\n    // Event delegation for breadcrumb clicks\n    var breadcrumb = htmlNode.querySelector('#breadcrumb');\n    if (breadcrumb) {\n        breadcrumb.addEventListener('click', function(e) {\n            var link = e.target.closest('[data-nav]');\n            if (link) {\n                var nav = link.getAttribute('data-nav');\n                if (nav === 'l4') {\n                    window.navigateToL4();\n                } else if (nav === 'l3') {\n                    window.bosHierarchyState.level = 'l3';\n                    window.bosHierarchyState.l3_selected = null;\n                    window.bosRenderDashboard();\n                }\n            }\n        });\n    }\n\n    // Event delegation for row clicks\n    var tableBody = htmlNode.querySelector('#tableBody');\n    if (tableBody) {\n        tableBody.addEventListener('click', function(e) {\n            var row = e.target.closest('.hierarchy-row');\n            if (row) {\n                var state = window.bosHierarchyState;\n                if (state.level === 'l4') {\n                    var l4Name = decodeURIComponent(row.getAttribute('data-l4'));\n                    if (l4Name) window.navigateToL3(l4Name);\n                } else if (state.level === 'l3') {\n                    var l3Name = decodeURIComponent(row.getAttribute('data-l3'));\n                    if (l3Name) window.navigateToServices(l3Name);\n                } else if (state.level === 'services') {\n                    var serviceId = decodeURIComponent(row.getAttribute('data-service-id'));\n                    if (serviceId) window.navigateToServiceDetail(serviceId);\n                }\n            }\n        });\n    }\n\n    // Initial render\n    window.bosRenderDashboard();\n}\n",
        "renderOnMount": true
      },
      "pluginVersion": "2.2.1"
    }
  ],
  "refresh": "30s",
  "schemaVersion": 39,
  "tags": [
    "executive",
    "unified",
    "hierarchy",
    "bos",
    "experimental",
    "splunk"
  ],
  "templating": {
    "list": [
      {
        "current": {
          "text": "",
          "value": ""
        },
        "hide": 0,
        "label": "L4 Selected",
        "name": "l4_selected",
        "options": [
          {
            "text": "",
            "value": ""
          }
        ],
        "query": "",
        "skipUrlSync": false,
        "type": "textbox"
      },
      {
        "current": {
          "text": "",
          "value": ""
        },
        "hide": 0,
        "label": "L3 Selected",
        "name": "l3_selected",
        "options": [
          {
            "text": "",
            "value": ""
          }
        ],
        "query": "",
        "skipUrlSync": false,
        "type": "textbox"
      }
    ]
  },
  "time": {
    "from": "now-2h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "BOS: Unified Hierarchy (Splunk)",
  "uid": "bos-exec-unified-splunk",
  "version": 0,
  "weekStart": ""
}