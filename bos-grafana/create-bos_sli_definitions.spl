# Create bos_sli_definitions.csv lookup table
# Generated from sli_definitions.csv
# Total records: 12

| makeresults count=1
     | eval service_id="SVC001", sliName="funding-success-rate", sliDisplayName="Wire Transfer 8AM Success Rate", sliType="ratioMetric", goodEventsCriteria_PO="Wire transfer funded by 8 AM deadline", goodEventsCriteria_Dev="status='FUNDED' AND funded_time<='08:00:00' AND closing_date=CURRENT_DATE", totalEventsCriteria_PO="All scheduled closings for today", totalEventsCriteria_Dev="closing_date=CURRENT_DATE AND request_type='CLOSING_FUNDING'", thresholdQuery_Dev="", thresholdOperator="", thresholdValue="", queryImplementation="SELECT COUNT(*) WHERE status='FUNDED' AND TIME(funded_timestamp)<='08:00:00'", dataSource="sql", dataSourceDetails="{\"database\":\"loans\",\"table\":\"wire_transfers\"}", technicalOwner="platform-engineering-team", implementationNotes="Critical 6-8 AM monitoring window"
| append
    [| makeresults count=1
     | eval service_id="SVC002", sliName="credit-check-success-rate", sliDisplayName="Credit Check Success Rate", sliType="ratioMetric", goodEventsCriteria_PO="Credit check returns valid score within 30 seconds", goodEventsCriteria_Dev="status='SUCCESS' AND score BETWEEN 300 AND 850 AND response_time_ms<30000", totalEventsCriteria_PO="All credit check requests", totalEventsCriteria_Dev="request_type='CREDIT_CHECK'", thresholdQuery_Dev="", thresholdOperator="", thresholdValue="", queryImplementation="SELECT COUNT(*) WHERE status='SUCCESS' AND response_time_ms<30000", dataSource="sql", dataSourceDetails="{\"database\":\"lending\",\"table\":\"credit_checks\"}", technicalOwner="platform-engineering-team", implementationNotes="30-second SLA for bureau response"]
| append
    [| makeresults count=1
     | eval service_id="SVC003", sliName="payment-response-time", sliDisplayName="Payment API Response Time", sliType="thresholdMetric", goodEventsCriteria_PO="", goodEventsCriteria_Dev="", totalEventsCriteria_PO="", totalEventsCriteria_Dev="", thresholdQuery_Dev="SELECT AVG(response_time_ms) FROM requests WHERE service='payment-api'", thresholdOperator="lt", thresholdValue="100", queryImplementation="SELECT AVG(response_time_ms) FROM payment_requests WHERE timestamp >= NOW() - INTERVAL 5 MINUTE", dataSource="sql", dataSourceDetails="{\"database\":\"payments\",\"table\":\"api_requests\"}", technicalOwner="platform-engineering-team", implementationNotes="100ms threshold for high-volume service"]
| append
    [| makeresults count=1
     | eval service_id="SVC003", sliName="payment-volume", sliDisplayName="Daily Payment Volume", sliType="thresholdMetric", goodEventsCriteria_PO="", goodEventsCriteria_Dev="", totalEventsCriteria_PO="", totalEventsCriteria_Dev="", thresholdQuery_Dev="SELECT SUM(amount) FROM payments WHERE date=CURRENT_DATE", thresholdOperator="gte", thresholdValue="10000000", queryImplementation="SELECT SUM(amount) FROM payment_transactions WHERE timestamp >= NOW() - INTERVAL 1 DAY", dataSource="sql", dataSourceDetails="{\"database\":\"payments\",\"table\":\"transactions\"}", technicalOwner="platform-engineering-team", implementationNotes="Daily volume aggregation"]
| append
    [| makeresults count=1
     | eval service_id="SVC003", sliName="payment-escalations", sliDisplayName="Support Escalations", sliType="thresholdMetric", goodEventsCriteria_PO="", goodEventsCriteria_Dev="", totalEventsCriteria_PO="", totalEventsCriteria_Dev="", thresholdQuery_Dev="SELECT COUNT(*) FROM escalations WHERE category='payment' AND date=CURRENT_DATE", thresholdOperator="lte", thresholdValue="50", queryImplementation="SELECT COUNT(*) FROM support_tickets WHERE type='payment' AND severity='escalation'", dataSource="sql", dataSourceDetails="{\"database\":\"support\",\"table\":\"tickets\"}", technicalOwner="platform-engineering-team", implementationNotes="Real-time escalation counter"]
| append
    [| makeresults count=1
     | eval service_id="SVC003", sliName="payment-compliance", sliDisplayName="PCI Compliance Rate", sliType="ratioMetric", goodEventsCriteria_PO="Transaction passes all PCI compliance checks", goodEventsCriteria_Dev="pci_compliant=true AND encryption_valid=true", totalEventsCriteria_PO="All payment transactions", totalEventsCriteria_Dev="transaction_type='payment'", thresholdQuery_Dev="", thresholdOperator="", thresholdValue="", queryImplementation="SELECT COUNT(*) WHERE pci_compliant=true", dataSource="sql", dataSourceDetails="{\"database\":\"payments\",\"table\":\"compliance_checks\"}", technicalOwner="platform-engineering-team", implementationNotes="PCI-DSS compliance validation"]
| append
    [| makeresults count=1
     | eval service_id="SVC005", sliName="dealer-response-time", sliDisplayName="Dealer Credit Decision Time", sliType="ratioMetric", goodEventsCriteria_PO="Credit decision returned to dealer within 2 minutes", goodEventsCriteria_Dev="decision_sent=true AND response_time_seconds<120", totalEventsCriteria_PO="All dealer credit requests", totalEventsCriteria_Dev="source='DEALER_NETWORK'", thresholdQuery_Dev="", thresholdOperator="", thresholdValue="", queryImplementation="SELECT COUNT(*) WHERE response_time_seconds<120", dataSource="sql", dataSourceDetails="{\"database\":\"auto_lending\",\"table\":\"dealer_requests\"}", technicalOwner="platform-engineering-team", implementationNotes="2-minute SLA for dealer network"]
| append
    [| makeresults count=1
     | eval service_id="SVC013", sliName="same-day-decision", sliDisplayName="Personal Loan Same-Day Decision", sliType="ratioMetric", goodEventsCriteria_PO="Loan decision delivered same business day", goodEventsCriteria_Dev="DATE(decision_timestamp)=DATE(application_timestamp)", totalEventsCriteria_PO="All personal loan applications", totalEventsCriteria_Dev="product_type='PERSONAL_LOAN'", thresholdQuery_Dev="", thresholdOperator="", thresholdValue="", queryImplementation="SELECT COUNT(*) WHERE DATE(decision_timestamp)=DATE(application_timestamp)", dataSource="sql", dataSourceDetails="{\"database\":\"personal_lending\",\"table\":\"applications\"}", technicalOwner="platform-engineering-team", implementationNotes="Same-day commitment tracking"]
| append
    [| makeresults count=1
     | eval service_id="SVC017", sliName="payment-posting-accuracy", sliDisplayName="Payment Posting Accuracy", sliType="ratioMetric", goodEventsCriteria_PO="Payment posts without manual intervention", goodEventsCriteria_Dev="manual_intervention=false AND exception_queue=false", totalEventsCriteria_PO="All payments received", totalEventsCriteria_Dev="payment_received=true", thresholdQuery_Dev="", thresholdOperator="", thresholdValue="", queryImplementation="SELECT COUNT(*) WHERE manual_intervention=false", dataSource="sql", dataSourceDetails="{\"database\":\"servicing\",\"table\":\"payment_posting\"}", technicalOwner="platform-engineering-team", implementationNotes="Exception queue monitoring"]
| append
    [| makeresults count=1
     | eval service_id="SVC018", sliName="fee-deferment-accuracy", sliDisplayName="Fee Assessment Accuracy", sliType="ratioMetric", goodEventsCriteria_PO="No late fees on deferred accounts", goodEventsCriteria_Dev="late_fee_assessed=false", totalEventsCriteria_PO="All deferred accounts", totalEventsCriteria_Dev="account_status='DEFERRED'", thresholdQuery_Dev="", thresholdOperator="", thresholdValue="", queryImplementation="SELECT COUNT(*) WHERE late_fee_assessed=false AND account_status='DEFERRED'", dataSource="sql", dataSourceDetails="{\"database\":\"servicing\",\"table\":\"fee_assessment\"}", technicalOwner="compliance-engineering-team", implementationNotes="Zero tolerance for deferment fee errors"]
| append
    [| makeresults count=1
     | eval service_id="SVC019", sliName="gap-refund-processing", sliDisplayName="GAP Refund Processing", sliType="ratioMetric", goodEventsCriteria_PO="GAP refund processed for early termination", goodEventsCriteria_Dev="gap_refund_processed=true", totalEventsCriteria_PO="All early loan terminations with GAP", totalEventsCriteria_Dev="loan_closed_early=true AND gap_insurance=true", thresholdQuery_Dev="", thresholdOperator="", thresholdValue="", queryImplementation="SELECT COUNT(*) WHERE gap_refund_processed=true", dataSource="sql", dataSourceDetails="{\"database\":\"auto_servicing\",\"table\":\"gap_refunds\"}", technicalOwner="compliance-engineering-team", implementationNotes="Insurance refund compliance"]
| append
    [| makeresults count=1
     | eval service_id="SVC020", sliName="modification-denial-rate", sliDisplayName="Modification Denial Rate Stability", sliType="thresholdMetric", goodEventsCriteria_PO="", goodEventsCriteria_Dev="", totalEventsCriteria_PO="", totalEventsCriteria_Dev="", thresholdQuery_Dev="SELECT denial_rate FROM modification_stats WHERE week=CURRENT_WEEK", thresholdOperator="lt", thresholdValue="10", queryImplementation="SELECT COUNT(*) WHERE decision='DENIED' / COUNT(*) * 100", dataSource="sql", dataSourceDetails="{\"database\":\"mortgage_servicing\",\"table\":\"modifications\"}", technicalOwner="risk-engineering-team", implementationNotes="10% threshold for anomaly detection"]
| fields - _time
| outputlookup bos_sli_definitions.csv
