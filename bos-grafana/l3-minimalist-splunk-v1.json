{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": null,
  "links": [],
  "panels": [
    {
      "id": 1,
      "type": "gapit-htmlgraphics-panel",
      "title": "L3 Products",
      "transparent": true,
      "gridPos": {
        "h": 24,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "datasource": {
        "type": "grafana-splunk-datasource",
        "uid": "d4c682f8-fd9b-46b2-9b89-e15410aa52dc"
      },
      "targets": [
        {
          "datasource": {
            "type": "grafana-splunk-datasource",
            "uid": "d4c682f8-fd9b-46b2-9b89-e15410aa52dc"
          },
          "query": "| inputlookup bos_services.csv\n| search l4_product_line=\"$l4_product_line\"\n| stats dc(service_id) as service_count by l3_product\n| join type=left l3_product\n    [| inputlookup bos_signal_status.csv\n     | lookup bos_services.csv service_id OUTPUT l3_product\n     | where l3_product!=\"\"\n     | eval status_value=case(\n         status==\"Green\", 3,\n         status==\"Amber\", 2,\n         status==\"Red\", 1,\n         1=1, null())\n     | stats min(status_value) as min_status count as signal_count by l3_product]\n| eval min_status=coalesce(min_status, 3)\n| eval signal_count=coalesce(signal_count, 0)\n| eval health_status=case(\n    min_status==3, \"Green\",\n    min_status==2, \"Amber\",\n    min_status==1, \"Red\",\n    1=1, \"Unknown\")\n| table l3_product service_count signal_count health_status\n| sort l3_product",
          "refId": "A",
          "rawQuery": true
        }
      ],
      "options": {
        "SVGBaseFix": true,
        "css": "\n:root {\n    --wf-red: #D71E28;\n    --wf-gray-100: #F3F4F6;\n    --wf-gray-200: #E5E7EB;\n    --wf-gray-500: #6B7280;\n    --wf-gray-700: #374151;\n    --wf-gray-900: #111827;\n    --status-healthy: #10B981;\n    --status-degraded: #F59E0B;\n    --status-critical: #EF4444;\n}\n\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    background-color: var(--gray-100);\n    color: var(--gray-900);\n    line-height: 1.6;\n}\n\n.dashboard-header {\n    background-color: var(--brand-primary);\n    color: white;\n    padding: 0.75rem 2rem;\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n.org-context {\n    font-size: 0.875rem;\n    opacity: 0.9;\n}\n\n.dashboard-header h1 {\n    font-size: 1.25rem;\n    font-weight: 700;\n    margin-top: 0.25rem;\n}\n\n.container {\n    max-width: 1600px;\n    margin: 0 auto;\n    padding: 2rem;\n}\n\n.products-list {\n    background: white;\n    border-radius: 0.5rem;\n    box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n    overflow: hidden;\n}\n\n.list-header {\n    display: grid;\n    grid-template-columns: 2fr 1fr 2fr 1.5fr 1fr;\n    gap: 1rem;\n    padding: 0.75rem 1.5rem;\n    background: var(--gray-100);\n    border-bottom: 2px solid var(--gray-200);\n    font-weight: 600;\n    font-size: 0.75rem;\n    text-transform: uppercase;\n    color: var(--gray-700);\n}\n\n.product-row {\n    display: grid;\n    grid-template-columns: 2fr 1fr 2fr 1.5fr 1fr;\n    gap: 1rem;\n    padding: 0.75rem 1.5rem;\n    border-bottom: 1px solid var(--gray-200);\n    cursor: pointer;\n    transition: background 0.2s;\n    align-items: center;\n}\n\n.product-row:hover {\n    background: var(--gray-100);\n}\n\n.product-row:last-child {\n    border-bottom: none;\n}\n\n.product-name-cell {\n    display: flex;\n    align-items: center;\n    gap: 0.75rem;\n}\n\n.status-indicator {\n    width: 4px;\n    height: 40px;\n    border-radius: 2px;\n    flex-shrink: 0;\n}\n\n.status-indicator.healthy { background: var(--status-healthy); }\n.status-indicator.degraded { background: var(--status-degraded); }\n.status-indicator.critical { background: var(--status-critical); }\n\n.product-name {\n    font-weight: 600;\n    color: var(--gray-900);\n}\n\n.status-cell {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.status-dot {\n    width: 12px;\n    height: 12px;\n    border-radius: 50%;\n    flex-shrink: 0;\n}\n\n.status-dot.healthy { background: var(--status-healthy); }\n.status-dot.degraded { background: var(--status-degraded); }\n.status-dot.critical { background: var(--status-critical); }\n\n.status-text {\n    font-size: 0.875rem;\n    font-weight: 500;\n}\n\n.status-text.healthy { color: var(--status-healthy); }\n.status-text.degraded { color: var(--status-degraded); }\n.status-text.critical { color: var(--status-critical); }\n\n.sparkline-cell {\n    display: flex;\n    gap: 2px;\n    height: 24px;\n    align-items: flex-end;\n}\n\n.sparkline-bar {\n    flex: 1;\n    min-width: 3px;\n    height: 24px;\n    border-radius: 1px;\n}\n\n.sparkline-bar.healthy { background: var(--status-healthy); }\n.sparkline-bar.degraded { background: var(--status-degraded); }\n.sparkline-bar.critical { background: var(--status-critical); }\n\n.breakdown-cell {\n    display: flex;\n    gap: 0.5rem;\n    font-size: 0.875rem;\n    flex-wrap: wrap;\n}\n\n.signal-count {\n    padding: 0.25rem 0.5rem;\n    border-radius: 0.25rem;\n    font-size: 0.75rem;\n    font-weight: 600;\n    white-space: nowrap;\n}\n\n.signal-count.critical {\n    background: #FEE2E2;\n    color: #991B1B;\n}\n\n.signal-count.degraded {\n    background: #FEF3C7;\n    color: #92400E;\n}\n\n.signal-count.healthy {\n    background: #D1FAE5;\n    color: #065F46;\n}\n\n.coverage-cell {\n    font-size: 0.875rem;\n    color: var(--gray-700);\n}\n\n.loading, .error {\n    text-align: center;\n    padding: 2rem;\n    color: var(--gray-500);\n}\n",
        "html": "\n<div class=\"dashboard-header\">\n    <div class=\"org-context\" id=\"orgContext\">Loading...</div>\n    <h1>L3 Products</h1>\n</div>\n\n<div class=\"container\">\n    <div class=\"products-list\">\n        <div class=\"list-header\">\n            <div>L3 Product</div>\n            <div>Status</div>\n            <div>Last 12 Hours</div>\n            <div>Services</div>\n            <div>Coverage</div>\n        </div>\n        <div id=\"tableBody\">\n            <div class=\"loading\">Loading data...</div>\n        </div>\n    </div>\n</div>\n",
        "onRender": "\ntry {\n    const tableBody = htmlNode.querySelector('#tableBody');\n    const orgContext = htmlNode.querySelector('#orgContext');\n\n    if (!tableBody) {\n        console.error('tableBody element not found');\n        return;\n    }\n\n    // Set org context from variable\n    if (orgContext) {\n        const l4ProductLine = '$l4_product_line' || 'Consumer Technology';\n        orgContext.textContent = l4ProductLine;\n    }\n\n    // Get query data\n    let queryData = null;\n    if (typeof data !== 'undefined' && data && data.series) {\n        queryData = data.series;\n    } else if (typeof htmlGraphics !== 'undefined' && htmlGraphics.data && htmlGraphics.data.series) {\n        queryData = htmlGraphics.data.series;\n    }\n\n    if (!queryData || queryData.length === 0) {\n        tableBody.innerHTML = '<div class=\"error\">No data available</div>';\n        return;\n    }\n\n    const series = queryData[0];\n    const fields = series.fields;\n\n    if (!fields || fields.length === 0) {\n        tableBody.innerHTML = '<div class=\"error\">No fields in data</div>';\n        return;\n    }\n\n    // Build field map\n    const fieldMap = {};\n    fields.forEach((field, index) => {\n        fieldMap[field.name] = index;\n    });\n\n    // Get values arrays\n    const values = fields.map(f => f.values.buffer || f.values || []);\n    const rowCount = values[0] ? values[0].length : 0;\n\n    if (rowCount === 0) {\n        tableBody.innerHTML = '<div class=\"error\">No rows in data</div>';\n        return;\n    }\n\n    // Build table rows\n    let tableHTML = '';\n\n    for (let i = 0; i < rowCount; i++) {\n        const l3Product = values[fieldMap['l3_product']] ? values[fieldMap['l3_product']][i] : 'Unknown';\n        const serviceCount = values[fieldMap['service_count']] ? values[fieldMap['service_count']][i] : 0;\n        const signalCount = values[fieldMap['signal_count']] ? values[fieldMap['signal_count']][i] : 0;\n        const healthStatus = values[fieldMap['health_status']] ? values[fieldMap['health_status']][i] : 'Unknown';\n\n        // Determine status class\n        const statusClass = healthStatus === 'Green' ? 'healthy' :\n                           healthStatus === 'Amber' ? 'degraded' :\n                           'critical';\n\n        // Mock sparkline (all green for now - Phase 2: real time series data)\n        let sparklineHTML = '';\n        for (let j = 0; j < 12; j++) {\n            sparklineHTML += `<div class=\"sparkline-bar ${statusClass}\"></div>`;\n        }\n\n        // Mock breakdown counts (Phase 2: real signal counts)\n        const breakdownHTML = '<span class=\"signal-count ' + statusClass + '\">' + signalCount + '</span>';\n\n        tableHTML += `\n            <div class=\"product-row\" onclick=\"window.location.href='/d/bos-exec-services-splunk/services-list-pattern-splunk-v1?var-l3_product=${encodeURIComponent(l3Product)}'\">\n                <div class=\"product-name-cell\">\n                    <div class=\"status-indicator ${statusClass}\"></div>\n                    <div class=\"product-name\">${l3Product}</div>\n                </div>\n                <div class=\"status-cell\">\n                    <div class=\"status-dot ${statusClass}\"></div>\n                    <span class=\"status-text ${statusClass}\">${healthStatus}</span>\n                </div>\n                <div class=\"sparkline-cell\">\n                    ${sparklineHTML}\n                </div>\n                <div class=\"breakdown-cell\">\n                    ${breakdownHTML}\n                </div>\n                <div class=\"coverage-cell\">${signalCount}/${serviceCount}</div>\n            </div>\n        `;\n    }\n\n    tableBody.innerHTML = tableHTML;\n\n} catch (err) {\n    console.error('Error processing data:', err);\n    const tableBody = htmlNode.querySelector('#tableBody');\n    if (tableBody) {\n        tableBody.innerHTML = '<div class=\"error\">Error: ' + err.message + '</div>';\n    }\n}\n",
        "renderOnMount": true
      },
      "pluginVersion": "2.2.1"
    }
  ],
  "refresh": "30s",
  "schemaVersion": 39,
  "tags": [
    "executive",
    "l3",
    "bos",
    "list-pattern",
    "splunk"
  ],
  "templating": {
    "list": [
      {
        "current": {
          "selected": false,
          "text": "",
          "value": ""
        },
        "hide": 0,
        "name": "l4_product_line",
        "options": [],
        "query": "",
        "skipUrlSync": false,
        "type": "textbox"
      }
    ]
  },
  "time": {
    "from": "now-2h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "L3 - Products (List Pattern v1 - Splunk)",
  "uid": "bos-exec-l3-splunk",
  "version": 0,
  "weekStart": ""
}