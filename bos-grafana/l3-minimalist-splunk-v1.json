{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": null,
  "links": [],
  "panels": [
    {
      "id": 1,
      "type": "gapit-htmlgraphics-panel",
      "title": "",
      "transparent": true,
      "gridPos": {
        "h": 24,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "datasource": {
        "type": "grafana-splunk-datasource",
        "uid": "d4c682f8-fd9b-46b2-9b89-e15410aa52dc"
      },
      "targets": [
        {
          "datasource": {
            "type": "grafana-splunk-datasource",
            "uid": "d4c682f8-fd9b-46b2-9b89-e15410aa52dc"
          },
          "queryText": "\n                    SELECT\n                        s.l3_product,\n                        MAX(s.l3_description) as business_purpose,\n                        COUNT(DISTINCT s.service_id) as service_count,\n                        COUNT(DISTINCT CASE WHEN EXISTS(\n                            SELECT 1 FROM signal_status ss WHERE ss.service_id = s.service_id\n                        ) THEN s.service_id END) as services_with_signals,\n                        ROUND(\n                            (COUNT(DISTINCT CASE WHEN EXISTS(\n                                SELECT 1 FROM signal_status ss WHERE ss.service_id = s.service_id\n                            ) THEN s.service_id END) * 100.0) / COUNT(DISTINCT s.service_id),\n                            1\n                        ) as coverage,\n                        ROUND(AVG(\n                            (SELECT\n                                (SUM(CASE WHEN status='Green' THEN 100\n                                     WHEN status='Amber' THEN 50\n                                     ELSE 0 END) * 1.0) / COUNT(*)\n                             FROM signal_status ss\n                             WHERE ss.service_id = s.service_id)\n                        ), 1) as health,\n                        CASE MIN(\n                            (SELECT MIN(\n                                CASE status\n                                    WHEN 'Green' THEN 3\n                                    WHEN 'Amber' THEN 2\n                                    WHEN 'Red' THEN 1\n                                END\n                            )\n                             FROM signal_status ss\n                             WHERE ss.service_id = s.service_id)\n                        )\n                            WHEN 1 THEN 'Red'\n                            WHEN 2 THEN 'Amber'\n                            WHEN 3 THEN 'Green'\n                            ELSE 'Unknown'\n                        END as health_status,\n                        COALESCE(\n                            (SELECT COUNT(*) FROM incidents i\n                             JOIN services s2 ON i.service_id = s2.service_id\n                             WHERE s2.l3_product = s.l3_product\n                               AND i.severity IN ('Sev1', 'Sev2')\n                               AND i.status = 'Open'),\n                            0\n                        ) as incident_count\n                    FROM services s\n                    WHERE s.l4_product_line = '$l4_product_line'\n                    GROUP BY s.l3_product\n                    ORDER BY s.l3_product\n                ",
          "rawQueryText": "\n                    SELECT\n                        s.l3_product,\n                        MAX(s.l3_description) as business_purpose,\n                        COUNT(DISTINCT s.service_id) as service_count,\n                        COUNT(DISTINCT CASE WHEN EXISTS(\n                            SELECT 1 FROM signal_status ss WHERE ss.service_id = s.service_id\n                        ) THEN s.service_id END) as services_with_signals,\n                        ROUND(\n                            (COUNT(DISTINCT CASE WHEN EXISTS(\n                                SELECT 1 FROM signal_status ss WHERE ss.service_id = s.service_id\n                            ) THEN s.service_id END) * 100.0) / COUNT(DISTINCT s.service_id),\n                            1\n                        ) as coverage,\n                        ROUND(AVG(\n                            (SELECT\n                                (SUM(CASE WHEN status='Green' THEN 100\n                                     WHEN status='Amber' THEN 50\n                                     ELSE 0 END) * 1.0) / COUNT(*)\n                             FROM signal_status ss\n                             WHERE ss.service_id = s.service_id)\n                        ), 1) as health,\n                        CASE MIN(\n                            (SELECT MIN(\n                                CASE status\n                                    WHEN 'Green' THEN 3\n                                    WHEN 'Amber' THEN 2\n                                    WHEN 'Red' THEN 1\n                                END\n                            )\n                             FROM signal_status ss\n                             WHERE ss.service_id = s.service_id)\n                        )\n                            WHEN 1 THEN 'Red'\n                            WHEN 2 THEN 'Amber'\n                            WHEN 3 THEN 'Green'\n                            ELSE 'Unknown'\n                        END as health_status,\n                        COALESCE(\n                            (SELECT COUNT(*) FROM incidents i\n                             JOIN services s2 ON i.service_id = s2.service_id\n                             WHERE s2.l3_product = s.l3_product\n                               AND i.severity IN ('Sev1', 'Sev2')\n                               AND i.status = 'Open'),\n                            0\n                        ) as incident_count\n                    FROM services s\n                    WHERE s.l4_product_line = '$l4_product_line'\n                    GROUP BY s.l3_product\n                    ORDER BY s.l3_product\n                ",
          "refId": "A",
          "format": "table"
        }
      ],
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": false,
        "centerAlignContent": false,
        "codeData": "{}",
        "css": "\n                /* Minimalist Design System - Clean and Fast */\n                * {\n                    margin: 0;\n                    padding: 0;\n                    box-sizing: border-box;\n                }\n\n                .dashboard-container {\n                    background: #ffffff;\n                    color: #000000;\n                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n                    padding: 1.5rem;\n                    min-height: 100vh;\n                }\n\n                /* Breadcrumb Navigation */\n                .breadcrumb {\n                    font-size: 0.875rem;\n                    margin-bottom: 1rem;\n                    color: #666666;\n                }\n\n                .breadcrumb a {\n                    color: #000000;\n                    text-decoration: underline;\n                }\n\n                .breadcrumb a:hover {\n                    opacity: 0.7;\n                }\n\n                .separator {\n                    margin: 0 0.5rem;\n                    color: #cccccc;\n                }\n\n                .breadcrumb .current {\n                    color: #000000;\n                    font-weight: 500;\n                }\n\n                /* Header section - minimal styling */\n                .header {\n                    border-bottom: 1px solid #cccccc;\n                    padding-bottom: 1rem;\n                    margin-bottom: 2rem;\n                }\n\n                .title {\n                    font-size: 1.875rem;\n                    font-weight: 700;\n                    color: #000000;\n                    margin: 0;\n                }\n\n                .subtitle {\n                    font-size: 0.875rem;\n                    color: #666666;\n                    margin-top: 0.25rem;\n                }\n\n                /* Stats cards - minimal borders only */\n                .stats-grid {\n                    display: grid;\n                    grid-template-columns: repeat(3, 1fr);\n                    gap: 1.5rem;\n                    margin-bottom: 2rem;\n                }\n\n                .stat-card {\n                    background: #ffffff;\n                    border: 1px solid #cccccc;\n                    padding: 1.5rem;\n                }\n\n                .stat-label {\n                    font-size: 0.875rem;\n                    font-weight: 700;\n                    color: #000000;\n                    text-transform: uppercase;\n                    letter-spacing: 0.05em;\n                }\n\n                .stat-value {\n                    font-size: 1.875rem;\n                    font-weight: 700;\n                    color: #000000;\n                    margin-top: 0.5rem;\n                }\n\n                /* Data table - clean and minimal */\n                .table-container {\n                    background: #ffffff;\n                    border: 1px solid #cccccc;\n                    overflow: hidden;\n                }\n\n                .data-table {\n                    width: 100%;\n                    border-collapse: collapse;\n                }\n\n                .data-table thead {\n                    background: #f7f7f7;\n                }\n\n                .data-table th {\n                    text-align: left;\n                    padding: 0.75rem 1.5rem;\n                    font-size: 0.75rem;\n                    font-weight: 700;\n                    text-transform: uppercase;\n                    letter-spacing: 0.05em;\n                    color: #000000;\n                    border-bottom: 1px solid #cccccc;\n                }\n\n                .data-table td {\n                    padding: 1rem 1.5rem;\n                    font-size: 0.875rem;\n                    border-bottom: 1px solid #cccccc;\n                    color: #000000;\n                }\n\n                .data-table tbody tr:last-child td {\n                    border-bottom: none;\n                }\n\n                .data-table tbody tr:hover {\n                    background: #f7f7f7;\n                }\n\n                .product-name {\n                    font-weight: 500;\n                    color: #000000;\n                }\n\n                .product-name-link {\n                    color: #000000;\n                    text-decoration: underline;\n                    font-weight: 500;\n                    cursor: pointer;\n                }\n\n                .product-name-link:hover {\n                    opacity: 0.7;\n                }\n\n                .metric-value {\n                    color: #666666;\n                }\n\n                .action-links {\n                    display: flex;\n                    gap: 1rem;\n                }\n\n                .action-link {\n                    color: #000000;\n                    text-decoration: underline;\n                    font-weight: 500;\n                }\n\n                .action-link:hover {\n                    opacity: 0.7;\n                }\n\n                /* Status colors - ONLY place with color */\n                .health-good {\n                    color: #00AA00;\n                }\n\n                .health-warning {\n                    color: #FFAA00;\n                }\n\n                .health-critical {\n                    color: #FF0000;\n                }\n\n                /* Business purpose text truncation */\n                .business-purpose {\n                    max-width: 400px;\n                    overflow: hidden;\n                    text-overflow: ellipsis;\n                    white-space: nowrap;\n                }\n\n                /* Loading state */\n                .loading {\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                    min-height: 400px;\n                    color: #666666;\n                }\n\n                .error {\n                    color: #FF0000;\n                    padding: 1rem;\n                    text-align: center;\n                }\n            ",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "\n                <div class=\"dashboard-container\">\n\n                    <!-- Breadcrumb Navigation -->\n                    <div class=\"breadcrumb\">\n                        <a href=\"/d/exec-l4-minimalist-splunk-v1/l4-product-lines-minimalist-splunk-v1\">L4 Product Lines</a>\n                        <span class=\"separator\">\u203a</span>\n                        <span class=\"current\" id=\"breadcrumbCurrent\">Loading...</span>\n                    </div>\n\n                    <!-- Header -->\n                    <div class=\"header\">\n                        <h1 class=\"title\">L3 Products</h1>\n                        <p class=\"subtitle\" id=\"subtitleText\">Loading...</p>\n                    </div>\n\n                    <!-- Summary Stats Cards -->\n                    <div class=\"stats-grid\">\n                        <div class=\"stat-card\">\n                            <p class=\"stat-label\">Signal Coverage</p>\n                            <p class=\"stat-value\" id=\"coverageStat\">--</p>\n                        </div>\n                        <div class=\"stat-card\">\n                            <p class=\"stat-label\">Signal Health</p>\n                            <p class=\"stat-value\" id=\"healthStat\">--</p>\n                        </div>\n                        <div class=\"stat-card\">\n                            <p class=\"stat-label\">Open Incidents</p>\n                            <p class=\"stat-value\" id=\"incidentsStat\">--</p>\n                        </div>\n                    </div>\n\n                    <!-- Data Table -->\n                    <div class=\"table-container\">\n                        <table class=\"data-table\">\n                            <thead>\n                                <tr>\n                                    <th>L3 Product</th>\n                                    <th>Business Purpose</th>\n                                    <th>Coverage</th>\n                                    <th>Health</th>\n                                    <th>Open Incidents</th>\n                                </tr>\n                            </thead>\n                            <tbody id=\"tableBody\">\n                                <tr>\n                                    <td colspan=\"5\" class=\"loading\">Loading data...</td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            ",
        "onInit": "",
        "onRender": "\n                // Helper functions\n                const getHealthClass = (value) => {\n                    if (value >= 95) return 'health-good';\n                    if (value >= 90) return 'health-warning';\n                    return 'health-critical';\n                };\n\n                // Process data\n                try {\n                    // Get DOM elements\n                    const tableBody = htmlNode.querySelector('#tableBody');\n                    const coverageStat = htmlNode.querySelector('#coverageStat');\n                    const healthStat = htmlNode.querySelector('#healthStat');\n                    const incidentsStat = htmlNode.querySelector('#incidentsStat');\n\n                    if (!tableBody) {\n                        console.error('tableBody element not found');\n                        return;\n                    }\n\n                    // Check if data is available\n                    let queryData = null;\n\n                    if (typeof data !== 'undefined' && data && data.series) {\n                        queryData = data.series;\n                    } else if (typeof htmlGraphics !== 'undefined' && htmlGraphics.data && htmlGraphics.data.series) {\n                        queryData = htmlGraphics.data.series;\n                    }\n\n                    if (!queryData || queryData.length === 0) {\n                        tableBody.innerHTML = '<tr><td colspan=\"5\" class=\"error\">No data available</td></tr>';\n                        return;\n                    }\n\n                    const series = queryData[0];\n                    const fields = series.fields;\n\n                    if (!fields || fields.length === 0) {\n                        tableBody.innerHTML = '<tr><td colspan=\"5\" class=\"error\">No fields in data</td></tr>';\n                        return;\n                    }\n\n                    // Find field indices\n                    const fieldMap = {};\n                    fields.forEach((field, index) => {\n                        fieldMap[field.name] = index;\n                    });\n\n                    // Get values arrays\n                    const values = fields.map(f => f.values.buffer || f.values || []);\n                    const rowCount = values[0] ? values[0].length : 0;\n\n                    if (rowCount === 0) {\n                        tableBody.innerHTML = '<tr><td colspan=\"5\" class=\"error\">No rows in data</td></tr>';\n                        return;\n                    }\n\n                    // Get URL parameters\n                    const urlParams = new URLSearchParams(window.location.search);\n                    const urlParamValue = urlParams.get('var-l4_product_line') || 'Unknown';\n\n                    // Update breadcrumb and subtitle\n                    const breadcrumbEl = htmlNode.querySelector('#breadcrumbCurrent');\n                    if (breadcrumbEl) {\n                        breadcrumbEl.textContent = urlParamValue;\n                    }\n\n                    const subtitleEl = htmlNode.querySelector('#subtitleText');\n                    if (subtitleEl) {\n                        subtitleEl.textContent = urlParamValue;\n                    }\n\n                    // Calculate summary stats (worst wins)\n                    let minHealth = 100;\n                    let minHealthStatus = 'Green';\n                    let totalIncidents = 0;\n                    let totalServicesWithSignals = 0;\n                    let totalServices = 0;\n\n                    // Build table rows\n                    let tableHTML = '';\n\n                    for (let i = 0; i < rowCount; i++) {\n                        const entityName = values[fieldMap['l3_product']] ? values[fieldMap['l3_product']][i] : 'Unknown';\n                        const businessPurpose = values[fieldMap['business_purpose']] ? values[fieldMap['business_purpose']][i] : '';\n                        const serviceCount = values[fieldMap['service_count']] ? values[fieldMap['service_count']][i] : 0;\n                        const servicesWithSignals = values[fieldMap['services_with_signals']] ? values[fieldMap['services_with_signals']][i] : 0;\n                        const coverage = values[fieldMap['coverage']] ? values[fieldMap['coverage']][i] : 0;\n                        let health = values[fieldMap['health']] ? values[fieldMap['health']][i] : null;\n                        const healthStatus = values[fieldMap['health_status']] ? values[fieldMap['health_status']][i] : 'Unknown';\n                        const incidentCount = values[fieldMap['incident_count']] ? values[fieldMap['incident_count']][i] : 0;\n\n                        // Handle null health values\n                        if (health === null || health === undefined) {\n                            health = 0;\n                        }\n\n                        // Update totals - worst wins\n                        if (health !== null && health < minHealth) minHealth = health;\n                        if (healthStatus === 'Red' || minHealthStatus === 'Red') {\n                            minHealthStatus = 'Red';\n                        } else if (healthStatus === 'Amber' && minHealthStatus !== 'Red') {\n                            minHealthStatus = 'Amber';\n                        }\n                        totalIncidents += incidentCount || 0;\n                        totalServicesWithSignals += servicesWithSignals || 0;\n                        totalServices += serviceCount || 0;\n\n                        // Status class for display\n                        const statusClass = healthStatus === 'Green' ? 'health-good' :\n                                           healthStatus === 'Amber' ? 'health-warning' :\n                                           'health-critical';\n\n                        // Conditionally include business purpose cell\n                        const hasBusinessPurposeField = 'business_purpose' in fieldMap;\n                        const businessPurposeCell = hasBusinessPurposeField ?\n                            `<td class=\"business-purpose\" title=\"${businessPurpose || ''}\">${businessPurpose || ''}</td>` : '';\n\n                        // Build row HTML\n                        tableHTML += `\n                            <tr>\n                                <td>\n                                    <a href=\"/d/exec-l3-product-services-splunk-v1/l3-product-services-splunk-v1?var-l3_product=${encodeURIComponent(entityName)}&var-l4_product_line=${encodeURIComponent(urlParamValue)}\"\n                                       class=\"product-name-link\">\n                                        ${entityName}\n                                    </a>\n                                </td>\n                                ${businessPurposeCell}\n                                <td class=\"metric-value\">${servicesWithSignals}/${serviceCount} (${coverage.toFixed(1)}%)</td>\n                                <td class=\"metric-value ${statusClass}\">${(health || 0).toFixed(1)}% (${healthStatus})</td>\n                                <td class=\"metric-value\">${incidentCount}</td>\n                            </tr>\n                        `;\n                    }\n\n                    // Update table\n                    tableBody.innerHTML = tableHTML;\n\n                    // Update summary stats\n                    const worstHealth = minHealth === 100 ? 0 : minHealth;\n                    const worstStatusClass = minHealthStatus === 'Green' ? 'health-good' :\n                                            minHealthStatus === 'Amber' ? 'health-warning' :\n                                            'health-critical';\n\n                    const platformCoverage = totalServices > 0 ?\n                        ((totalServicesWithSignals / totalServices) * 100).toFixed(1) : 0;\n\n                    if (coverageStat) {\n                        coverageStat.textContent = totalServicesWithSignals + '/' + totalServices + ' (' + platformCoverage + '%)';\n                        coverageStat.className = 'stat-value';\n                    }\n\n                    if (healthStat) {\n                        healthStat.textContent = worstHealth.toFixed(1) + '% (' + minHealthStatus + ')';\n                        healthStat.className = 'stat-value ' + worstStatusClass;\n                    }\n\n                    if (incidentsStat) {\n                        incidentsStat.textContent = totalIncidents;\n                    }\n\n                } catch (err) {\n                    console.error('Error processing data:', err);\n                    const tableBody = htmlNode.querySelector('#tableBody');\n                    if (tableBody) {\n                        tableBody.innerHTML = '<tr><td colspan=\"5\" class=\"error\">Error: ' + err.message + '</td></tr>';\n                    }\n                }\n            ",
        "overflow": "visible",
        "renderOnMount": true,
        "rootCSS": "",
        "showAdvancedHTMLOptions": true
      },
      "pluginVersion": "2.2.1"
    }
  ],
  "refresh": "30s",
  "schemaVersion": 39,
  "tags": [
    "executive",
    "l3",
    "bos",
    "html-graphics",
    "minimalist",
    "splunk"
  ],
  "templating": {
    "list": [
      {
        "datasource": {
          "type": "grafana-splunk-datasource",
          "uid": "d4c682f8-fd9b-46b2-9b89-e15410aa52dc"
        },
        "definition": "",
        "hide": 0,
        "includeAll": false,
        "label": "L4 Product Line",
        "multi": false,
        "name": "l4_product_line",
        "options": [],
        "query": "| inputlookup bos_services.csv | stats count by l4_product_line | fields l4_product_line | sort l4_product_line",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now-2h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "L3 - Products (Minimalist v2 - Splunk)",
  "uid": "exec-l3-minimalist-splunk-v1",
  "version": 0,
  "weekStart": ""
}