{
  "annotations": {
    "list": []
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": null,
  "links": [
    {
      "asDropdown": false,
      "icon": "external link",
      "includeVars": true,
      "keepTime": false,
      "tags": [],
      "targetBlank": false,
      "title": "Back to L3 Product Services",
      "tooltip": "Return to L3 Product Services view",
      "type": "link",
      "url": "/d/exec-l3-product-services-splunk-v1/l3-product-services-splunk-v1?var-l4_product_line=${l4_product_line:queryparam}&var-l3_product=${l3_product:queryparam}"
    }
  ],
  "panels": [
    {
      "datasource": {
        "type": "grafana-splunk-datasource",
        "uid": "d4c682f8-fd9b-46b2-9b89-e15410aa52dc"
      },
      "fieldConfig": {
        "defaults": {},
        "overrides": []
      },
      "gridPos": {
        "h": 24,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 1,
      "pluginVersion": "10.4.2",
      "title": "",
      "type": "gapit-htmlgraphics-panel",
      "targets": [
        {
          "datasource": {
            "type": "grafana-splunk-datasource",
            "uid": "d4c682f8-fd9b-46b2-9b89-e15410aa52dc"
          },
          "query": "| inputlookup bos_services.csv\n| where service_id=\"$service_id\"\n| lookup bos_slo_configurations.csv service_id OUTPUT sloTarget\n| eval slo_target=coalesce(sloTarget, 99.5)\n| join type=left service_id\n    [| inputlookup bos_signal_status.csv\n     | stats count as total_signals by service_id]\n| join type=left service_id\n    [| inputlookup bos_signal_status.csv\n     | eval health_score=case(\n         status==\"Green\", 100,\n         status==\"Amber\", 50,\n         status==\"Red\", 0,\n         1=1, null())\n     | stats avg(health_score) as current_health by service_id\n     | eval current_health=round(current_health, 1)]\n| join type=left service_id\n    [| inputlookup bos_signal_status.csv\n     | eval status_value=case(\n         status==\"Green\", 3,\n         status==\"Amber\", 2,\n         status==\"Red\", 1,\n         1=1, null())\n     | stats min(status_value) as min_status by service_id\n     | eval health_status=case(\n         min_status==1, \"Red\",\n         min_status==2, \"Amber\",\n         min_status==3, \"Green\",\n         1=1, \"Unknown\")]\n| join type=left service_id\n    [| inputlookup bos_incidents.csv\n     | where status=\"Open\"\n     | stats count as open_incidents by service_id]\n| fillnull value=0 current_health total_signals open_incidents\n| eval health_status=coalesce(health_status, \"Unknown\")\n| fields service_id displayName businessPurpose current_health health_status slo_target total_signals open_incidents",
          "refId": "A",
          "rawQuery": true
        },
        {
          "datasource": {
            "type": "grafana-splunk-datasource",
            "uid": "d4c682f8-fd9b-46b2-9b89-e15410aa52dc"
          },
          "query": "| inputlookup bos_signal_status.csv\n| where service_id=\"$service_id\" AND (signal_type=\"Business\" OR signal_type=\"Process\" OR signal_type=\"System\")\n| eval sort_status=case(\n    status==\"Red\", 1,\n    status==\"Amber\", 2,\n    status==\"Green\", 3,\n    1=1, 4)\n| eval sort_type=case(\n    signal_type==\"Business\", 1,\n    signal_type==\"Process\", 2,\n    signal_type==\"System\", 3,\n    1=1, 4)\n| sort sort_status sort_type signal_name\n| fields signal_id signal_type signal_name status timestamp",
          "refId": "B",
          "rawQuery": true
        },
        {
          "datasource": {
            "type": "grafana-splunk-datasource",
            "uid": "d4c682f8-fd9b-46b2-9b89-e15410aa52dc"
          },
          "query": "| inputlookup bos_incidents.csv\n| where service_id=\"$service_id\" AND status=\"Open\"\n| eval sort_severity=case(\n    severity==\"Sev1\", 1,\n    severity==\"Sev2\", 2,\n    severity==\"Sev3\", 3,\n    severity==\"Sev4\", 4,\n    1=1, 5)\n| sort sort_severity -started\n| fields incident_id severity status started summary",
          "refId": "C",
          "rawQuery": true
        },
        {
          "datasource": {
            "type": "grafana-splunk-datasource",
            "uid": "d4c682f8-fd9b-46b2-9b89-e15410aa52dc"
          },
          "query": "| inputlookup bos_sli_definitions.csv\n| where service_id=\"$service_id\"\n| lookup bos_slo_configurations.csv service_id OUTPUT sloTarget as target\n| eval sli_display_name=coalesce(sliDisplayName, sliName)\n| join type=left service_id sliName\n    [| inputlookup bos_sli_metrics.csv\n     | eval current_time=now()\n     | eval one_hour_ago=relative_time(current_time, \"-1h\")\n     | where timestamp >= one_hour_ago\n     | eval current_value=(good_events * 100.0) / total_events\n     | stats avg(current_value) as current_value by service_id sliName\n     | eval current_value=round(current_value, 1)]\n| join type=left service_id sliName\n    [| inputlookup bos_sli_metrics.csv\n     | stats max(timestamp) as last_updated by service_id sliName]\n| fillnull value=0 current_value\n| sort sliName\n| fields sliName sli_display_name sliType target current_value last_updated",
          "refId": "D",
          "rawQuery": true
        },
        {
          "datasource": {
            "type": "grafana-splunk-datasource",
            "uid": "d4c682f8-fd9b-46b2-9b89-e15410aa52dc"
          },
          "query": "| inputlookup bos_stakeholder_expectations.csv\n| where service_id=\"$service_id\"\n| eval sort_priority=case(\n    priority==\"CRITICAL\", 1,\n    priority==\"HIGH\", 2,\n    priority==\"MEDIUM\", 3,\n    priority==\"LOW\", 4,\n    1=1, 5)\n| sort sort_priority stakeholderGroup\n| fields stakeholderGroup stakeholderType expectationStatement priority",
          "refId": "E",
          "rawQuery": true
        },
        {
          "datasource": {
            "type": "grafana-splunk-datasource",
            "uid": "d4c682f8-fd9b-46b2-9b89-e15410aa52dc"
          },
          "query": "| inputlookup bos_impact_indicators.csv\n| where service_id=\"$service_id\"\n| lookup bos_signal_status.csv signal_id OUTPUT current_value status\n| eval sort_category=case(\n    impactCategory==\"customer_experience\", 1,\n    impactCategory==\"financial\", 2,\n    impactCategory==\"legal_risk\", 3,\n    impactCategory==\"operational\", 4,\n    1=1, 5)\n| sort sort_category\n| fields indicatorDisplayName unit impactCategory current_value status signal_id",
          "refId": "F",
          "rawQuery": true
        }
      ],
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": false,
        "centerAlignContent": false,
        "codeData": "{}",
        "css": "\n                /* Base styles */\n                * {\n                    margin: 0;\n                    padding: 0;\n                    box-sizing: border-box;\n                }\n\n                .dashboard-container {\n                    background: #ffffff;\n                    color: #000000;\n                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n                    padding: 1.5rem;\n                    min-height: 100vh;\n                }\n\n                /* Header section */\n                .header-section {\n                    background: #ffffff;\n                    border-bottom: 1px solid #cccccc;\n                    padding-bottom: 1rem;\n                    margin-bottom: 2rem;\n                }\n\n                .breadcrumb {\n                    font-size: 0.75rem;\n                    color: #666666;\n                    margin-bottom: 0.5rem;\n                }\n\n                .breadcrumb a {\n                    color: #000000;\n                    text-decoration: underline;\n                }\n\n                .breadcrumb a:hover {\n                    opacity: 0.7;\n                }\n\n                .breadcrumb .separator {\n                    margin: 0 0.5rem;\n                    color: #cccccc;\n                }\n\n                .service-title {\n                    font-size: 1.25rem;\n                    font-weight: 600;\n                    color: #000000;\n                    margin: 0;\n                }\n\n                .service-name {\n                    color: #000000;\n                    font-weight: 500;\n                    margin-left: 0.5rem;\n                }\n\n                .business-purpose {\n                    font-size: 0.75rem;\n                    color: #666666;\n                    font-style: italic;\n                    margin-top: 0.5rem;\n                }\n\n                /* Metric cards */\n                .metrics-grid {\n                    display: grid;\n                    grid-template-columns: repeat(2, 1fr);\n                    gap: 1rem;\n                    margin-bottom: 1.5rem;\n                }\n\n                .metric-card {\n                    background: #ffffff;\n                    border: 1px solid #cccccc;\n                    padding: 1rem;\n                    text-align: center;\n                }\n\n                .metric-label {\n                    font-size: 0.75rem;\n                    font-weight: 500;\n                    color: #666666;\n                    text-transform: uppercase;\n                    letter-spacing: 0.05em;\n                    margin-bottom: 0.5rem;\n                }\n\n                .metric-value {\n                    font-size: 2rem;\n                    font-weight: 700;\n                    color: #000000;\n                }\n\n                .metric-value-good { color: #00AA00; }\n                .metric-value-warning { color: #FFAA00; }\n                .metric-value-critical { color: #FF0000; }\n                .metric-value-info { color: #000000; }\n\n                /* Tables section */\n                .tables-section {\n                    display: flex;\n                    flex-direction: column;\n                    gap: 1rem;\n                }\n\n                .table-container {\n                    background: #ffffff;\n                    border: 1px solid #cccccc;\n                    overflow: hidden;\n                }\n\n                .table-header {\n                    background: #f7f7f7;\n                    padding: 0.75rem 1rem;\n                    border-bottom: 1px solid #cccccc;\n                }\n\n                .table-title {\n                    font-size: 0.875rem;\n                    font-weight: 500;\n                    color: #000000;\n                    text-transform: uppercase;\n                    letter-spacing: 0.05em;\n                }\n\n                .data-table {\n                    width: 100%;\n                    border-collapse: collapse;\n                }\n\n                .data-table thead {\n                    background: #f7f7f7;\n                }\n\n                .data-table th {\n                    text-align: left;\n                    padding: 0.5rem 1rem;\n                    font-size: 0.75rem;\n                    font-weight: 500;\n                    text-transform: uppercase;\n                    letter-spacing: 0.05em;\n                    color: #000000;\n                    border-bottom: 1px solid #cccccc;\n                }\n\n                .data-table td {\n                    padding: 0.5rem 1rem;\n                    font-size: 0.813rem;\n                    color: #000000;\n                    border-bottom: 1px solid #cccccc;\n                }\n\n                .data-table tbody tr:hover {\n                    background: #f7f7f7;\n                }\n\n                /* Signal type colors */\n                .signal-type-business { color: #000000; font-weight: 500; }\n                .signal-type-process { color: #000000; font-weight: 500; }\n                .signal-type-system { color: #666666; font-weight: 500; }\n\n                /* Status colors */\n                .status-green {\n                    color: #00AA00;\n                    padding: 0.125rem 0.5rem;\n                    font-weight: 500;\n                    display: inline-block;\n                }\n\n                .status-amber {\n                    color: #FFAA00;\n                    padding: 0.125rem 0.5rem;\n                    font-weight: 500;\n                    display: inline-block;\n                }\n\n                .status-red {\n                    color: #FF0000;\n                    padding: 0.125rem 0.5rem;\n                    font-weight: 500;\n                    display: inline-block;\n                }\n\n                /* Severity colors */\n                .severity-sev1 {\n                    color: #FF0000;\n                    padding: 0.125rem 0.5rem;\n                    font-weight: 600;\n                }\n\n                .severity-sev2 {\n                    color: #FFAA00;\n                    padding: 0.125rem 0.5rem;\n                    font-weight: 600;\n                }\n\n                .severity-sev3 {\n                    color: #000000;\n                    padding: 0.125rem 0.5rem;\n                    font-weight: 600;\n                }\n\n                .severity-sev4 {\n                    color: #666666;\n                    padding: 0.125rem 0.5rem;\n                    font-weight: 600;\n                }\n\n                /* Utility classes */\n                .no-data {\n                    text-align: center;\n                    color: #666666;\n                    padding: 2rem;\n                    font-style: italic;\n                }\n\n                .loading {\n                    text-align: center;\n                    color: #666666;\n                    padding: 2rem;\n                }\n\n                .incident-summary {\n                    max-width: 350px;\n                    overflow: hidden;\n                    text-overflow: ellipsis;\n                    white-space: nowrap;\n                }\n\n                /* Business impact cards */\n                .impact-grid {\n                    display: grid;\n                    grid-template-columns: repeat(4, 1fr);\n                    gap: 1rem;\n                    margin-bottom: 1rem;\n                }\n\n                .impact-card {\n                    background: #ffffff;\n                    border: 1px solid #cccccc;\n                    padding: 1rem;\n                    text-align: center;\n                }\n\n                .impact-card-title {\n                    font-size: 0.75rem;\n                    font-weight: 500;\n                    color: #666666;\n                    text-transform: uppercase;\n                    letter-spacing: 0.05em;\n                    margin-bottom: 0.75rem;\n                }\n\n                .impact-value {\n                    font-size: 1.5rem;\n                    font-weight: 600;\n                    color: #000000;\n                    margin-bottom: 0.5rem;\n                }\n\n                .impact-signal-link {\n                    font-size: 0.75rem;\n                    color: #000000;\n                    text-decoration: underline;\n                }\n\n                .impact-disclaimer {\n                    background: #f7f7f7;\n                    padding: 0.75rem 1rem;\n                    font-size: 0.75rem;\n                    color: #666666;\n                    font-style: italic;\n                    margin-bottom: 0.5rem;\n                    border-left: 3px solid #cccccc;\n                }\n\n                .section-note {\n                    font-size: 0.75rem;\n                    color: #666666;\n                    font-style: italic;\n                    padding: 0.5rem 1rem;\n                    text-align: center;\n                }\n\n                .empty-state {\n                    text-align: center;\n                    color: #666666;\n                    padding: 2rem;\n                    font-style: italic;\n                    background: #f7f7f7;\n                }\n\n                .empty-state-action {\n                    margin-top: 0.5rem;\n                    font-size: 0.75rem;\n                    color: #000000;\n                    text-decoration: underline;\n                }\n            ",
        "html": "\n                <div class=\"dashboard-container\">\n                    <!-- Header Section -->\n                    <div class=\"header-section\">\n                        <div class=\"breadcrumb\">\n                            <a href=\"/d/exec-l4-minimalist-splunk-v1/l4-product-lines-minimalist-splunk-v1\">L4 Product Lines</a>\n                            <span class=\"separator\">›</span>\n                            <a href=\"/d/exec-l3-minimalist-splunk-v1/l3-products-minimalist-splunk-v1\" id=\"l4Link\">\n                                <span id=\"l4Name\">Loading...</span>\n                            </a>\n                            <span class=\"separator\">›</span>\n                            <a href=\"/d/exec-l3-product-services-splunk-v1/l3-product-services-splunk-v1\" id=\"l3Link\">\n                                <span id=\"l3Name\">Loading...</span>\n                            </a>\n                        </div>\n                        <h1 class=\"service-title\">\n                            Service Detail:\n                            <span class=\"service-name\" id=\"serviceName\">Loading...</span>\n                        </h1>\n                        <p class=\"business-purpose\" id=\"businessPurpose\">Loading service information...</p>\n                    </div>\n\n                    <!-- Metric Cards -->\n                    <div class=\"metrics-grid\">\n                        <div class=\"metric-card\" id=\"healthCard\">\n                            <div class=\"metric-label\">Current Health</div>\n                            <div class=\"metric-value\" id=\"currentHealth\">--</div>\n                        </div>\n                        <div class=\"metric-card\">\n                            <div class=\"metric-label\">Open Incidents</div>\n                            <div class=\"metric-value metric-value-info\" id=\"openIncidents\">--</div>\n                        </div>\n                    </div>\n\n                    <!-- Stakeholder Expectations Section -->\n                    <div class=\"table-container\" style=\"margin-bottom: 1.5rem\">\n                        <div class=\"table-header\">\n                            <h3 class=\"table-title\">Stakeholder Expectations</h3>\n                        </div>\n                        <table class=\"data-table\">\n                            <thead>\n                                <tr>\n                                    <th style=\"width: 200px\">Stakeholder</th>\n                                    <th>Expectation</th>\n                                    <th style=\"width: 100px; text-align: center\">Priority</th>\n                                </tr>\n                            </thead>\n                            <tbody id=\"expectationsTableBody\">\n                                <tr>\n                                    <td colspan=\"3\" class=\"loading\">Loading expectations...</td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n\n                    <!-- Tables Section -->\n                    <div class=\"tables-section\">\n                        <!-- Operational Signals Table (Primary Health Indicators) -->\n                        <div class=\"table-container\">\n                            <div class=\"table-header\">\n                                <h3 class=\"table-title\">Operational Signals (Primary Health Indicators)</h3>\n                            </div>\n                            <table class=\"data-table\">\n                                <thead>\n                                    <tr>\n                                        <th style=\"width: 100px\">Type</th>\n                                        <th>Signal</th>\n                                        <th style=\"width: 80px; text-align: center\">Status</th>\n                                        <th style=\"width: 150px\">Last Updated</th>\n                                    </tr>\n                                </thead>\n                                <tbody id=\"signalsTableBody\">\n                                    <tr>\n                                        <td colspan=\"4\" class=\"loading\">Loading signals...</td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n\n                        <!-- Business Impact Section -->\n                        <div class=\"table-container\">\n                            <div class=\"table-header\">\n                                <h3 class=\"table-title\">Estimated Business Impact (Reference Context)</h3>\n                            </div>\n                            <div style=\"padding: 1rem\">\n                                <div class=\"impact-disclaimer\">\n                                    These are calculated estimates based on formulas. Use for context when operational signals indicate confirmed degradation.\n                                </div>\n                                <div class=\"impact-grid\" id=\"impactGrid\">\n                                    <div class=\"impact-card\">\n                                        <div class=\"impact-card-title\">Customer Experience</div>\n                                        <div class=\"impact-value\" id=\"impactCustomer\">--</div>\n                                        <div class=\"impact-signal-link\" id=\"impactCustomerSignal\"></div>\n                                    </div>\n                                    <div class=\"impact-card\">\n                                        <div class=\"impact-card-title\">Financial</div>\n                                        <div class=\"impact-value\" id=\"impactFinancial\">--</div>\n                                        <div class=\"impact-signal-link\" id=\"impactFinancialSignal\"></div>\n                                    </div>\n                                    <div class=\"impact-card\">\n                                        <div class=\"impact-card-title\">Legal/Risk</div>\n                                        <div class=\"impact-value\" id=\"impactLegalRisk\">--</div>\n                                        <div class=\"impact-signal-link\" id=\"impactLegalRiskSignal\"></div>\n                                    </div>\n                                    <div class=\"impact-card\">\n                                        <div class=\"impact-card-title\">Operational</div>\n                                        <div class=\"impact-value\" id=\"impactOperational\">--</div>\n                                        <div class=\"impact-signal-link\" id=\"impactOperationalSignal\"></div>\n                                    </div>\n                                </div>\n                                <div class=\"section-note\">\n                                    Click signal ID to see calculation method and history\n                                </div>\n                            </div>\n                        </div>\n\n                        <!-- Service Level Indicators Table -->\n                        <div class=\"table-container\">\n                            <div class=\"table-header\">\n                                <h3 class=\"table-title\">Service Level Indicators</h3>\n                            </div>\n                            <table class=\"data-table\">\n                                <thead>\n                                    <tr>\n                                        <th>SLI Name</th>\n                                        <th style=\"width: 100px; text-align: center\">Current</th>\n                                        <th style=\"width: 100px; text-align: center\">Target</th>\n                                        <th style=\"width: 80px; text-align: center\">Status</th>\n                                        <th style=\"width: 150px\">Last Updated</th>\n                                    </tr>\n                                </thead>\n                                <tbody id=\"sliTableBody\">\n                                    <tr>\n                                        <td colspan=\"5\" class=\"loading\">Loading SLIs...</td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n\n                        <!-- Active Incidents Table -->\n                        <div class=\"table-container\">\n                            <div class=\"table-header\">\n                                <h3 class=\"table-title\">Active Incidents</h3>\n                            </div>\n                            <table class=\"data-table\">\n                                <thead>\n                                    <tr>\n                                        <th style=\"width: 60px\">ID</th>\n                                        <th style=\"width: 50px\">Sev</th>\n                                        <th style=\"width: 60px\">Status</th>\n                                        <th>Summary</th>\n                                    </tr>\n                                </thead>\n                                <tbody id=\"incidentsTableBody\">\n                                    <tr>\n                                        <td colspan=\"4\" class=\"loading\">Loading incidents...</td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n            ",
        "onInit": "",
        "onRender": "\n                // Helper functions\n                const getHealthClass = (currentHealth, sloTarget) => {\n                    // Parse target if it's a string (e.g., \"95.0\")\n                    const target = typeof sloTarget === 'string' ? parseFloat(sloTarget) : sloTarget;\n                    const current = typeof currentHealth === 'string' ? parseFloat(currentHealth) : currentHealth;\n\n                    // Round to 1 decimal place (matching display format) for consistent logic\n                    const roundedCurrent = Math.round(current * 10) / 10;\n                    const roundedTarget = Math.round(target * 10) / 10;\n\n                    // Green: meeting or exceeding target\n                    if (roundedCurrent >= roundedTarget) return 'metric-health-good';\n                    // Yellow: within 2% of target (at risk)\n                    if (roundedCurrent >= roundedTarget - 2.0) return 'metric-health-warning';\n                    // Red: more than 2% below target (breaching SLO)\n                    return 'metric-health-critical';\n                };\n\n                const getHealthValueClass = (currentHealth, sloTarget) => {\n                    // Parse target if it's a string (e.g., \"95.0\")\n                    const target = typeof sloTarget === 'string' ? parseFloat(sloTarget) : sloTarget;\n                    const current = typeof currentHealth === 'string' ? parseFloat(currentHealth) : currentHealth;\n\n                    // Round to 1 decimal place (matching display format) for consistent logic\n                    const roundedCurrent = Math.round(current * 10) / 10;\n                    const roundedTarget = Math.round(target * 10) / 10;\n\n                    // Green: meeting or exceeding target\n                    if (roundedCurrent >= roundedTarget) return 'metric-value-good';\n                    // Yellow: within 2% of target (at risk)\n                    if (roundedCurrent >= roundedTarget - 2.0) return 'metric-value-warning';\n                    // Red: more than 2% below target (breaching SLO)\n                    return 'metric-value-critical';\n                };\n\n                const formatPercentage = (value) => {\n                    if (value === null || value === undefined) return '0%';\n                    // Convert to number if it's a string\n                    const numValue = typeof value === 'string' ? parseFloat(value) : value;\n                    if (isNaN(numValue) || numValue === 0) return '0%';\n                    return numValue.toFixed(1) + '%';\n                };\n\n                const formatTimestamp = (timestamp) => {\n                    if (!timestamp) return 'N/A';\n                    // Parse timestamp - handle both string and number\n                    let timestampNum = typeof timestamp === 'string' ? parseInt(timestamp, 10) : timestamp;\n                    if (isNaN(timestampNum)) return 'N/A';\n\n                    // Convert Unix timestamp (seconds) to milliseconds for JavaScript Date\n                    const timestampMs = timestampNum < 10000000000 ? timestampNum * 1000 : timestampNum;\n                    const date = new Date(timestampMs);\n                    const now = new Date();\n                    const diffMs = now - date;\n                    const diffMins = Math.floor(diffMs / 60000);\n                    const diffHours = Math.floor(diffMs / 3600000);\n                    const diffDays = Math.floor(diffMs / 86400000);\n\n                    if (diffMins < 1) return 'Just now';\n                    if (diffMins < 60) return diffMins + 'm ago';\n                    if (diffHours < 24) return diffHours + 'h ago';\n                    return diffDays + 'd ago';\n                };\n\n                // Process data\n                try {\n                    console.log('Processing Service Detail dashboard data...');\n\n                    // Get current parameters from URL\n                    let l4ProductLine = 'Home Lending';\n                    let l3Product = 'Originations';\n                    let serviceId = 'SVC001';\n\n                    try {\n                        const urlParams = new URLSearchParams(window.location.search);\n                        const urlL4 = urlParams.get('var-l4_product_line');\n                        const urlL3 = urlParams.get('var-l3_product');\n                        const urlService = urlParams.get('var-service_id');\n                        if (urlL4) l4ProductLine = decodeURIComponent(urlL4);\n                        if (urlL3) l3Product = decodeURIComponent(urlL3);\n                        if (urlService) serviceId = decodeURIComponent(urlService);\n                        console.log('Parameters:', { l4: l4ProductLine, l3: l3Product, service: serviceId });\n                    } catch (e) {\n                        console.log('Could not parse URL parameters:', e);\n                    }\n\n                    // Update navigation links\n                    const l4Link = htmlNode.querySelector('#l4Link');\n                    const l3Link = htmlNode.querySelector('#l3Link');\n                    const l4Name = htmlNode.querySelector('#l4Name');\n                    const l3Name = htmlNode.querySelector('#l3Name');\n\n                    if (l4Name) l4Name.textContent = l4ProductLine;\n                    if (l3Name) l3Name.textContent = l3Product;\n                    if (l4Link) {\n                        l4Link.href = '/d/exec-l3-minimalist-splunk-v1/l3-products-minimalist-splunk-v1?var-l4_product_line=' +\n                                      encodeURIComponent(l4ProductLine);\n                    }\n                    if (l3Link) {\n                        l3Link.href = '/d/exec-l3-product-services-splunk-v1/l3-product-services-splunk-v1?var-l4_product_line=' +\n                                      encodeURIComponent(l4ProductLine) + '&var-l3_product=' + encodeURIComponent(l3Product);\n                    }\n\n                    // Check if data is available\n                    let serviceData = null;\n                    let signalsData = null;\n                    let incidentsData = null;\n                    let sliData = null;\n                    let expectationsData = null;\n                    let impactData = null;\n\n                    // Access queries by index\n                    if (typeof data !== 'undefined' && data && data.series) {\n                        console.log('Total queries returned:', data.series.length);\n\n                        if (data.series.length > 0) {\n                            serviceData = data.series[0];\n                            console.log('Query 0 (Service) fields:', serviceData?.fields?.map(f => f.name));\n                        }\n                        if (data.series.length > 1) {\n                            signalsData = data.series[1];\n                            console.log('Query 1 (Signals) fields:', signalsData?.fields?.map(f => f.name));\n                        }\n                        if (data.series.length > 2) {\n                            incidentsData = data.series[2];\n                            console.log('Query 2 (Incidents) fields:', incidentsData?.fields?.map(f => f.name));\n                        }\n                        if (data.series.length > 3) {\n                            sliData = data.series[3];\n                            console.log('Query 3 (SLIs) fields:', sliData?.fields?.map(f => f.name));\n                        }\n                        if (data.series.length > 4) {\n                            expectationsData = data.series[4];\n                            console.log('Query 4 (Expectations) fields:', expectationsData?.fields?.map(f => f.name));\n                        }\n                        if (data.series.length > 5) {\n                            impactData = data.series[5];\n                            console.log('Query 5 (Impact) fields:', impactData?.fields?.map(f => f.name));\n                        }\n                    }\n\n                    // Process service data and update metrics\n                    if (serviceData && serviceData.fields && serviceData.fields.length > 0) {\n                        const fields = serviceData.fields;\n                        const values = fields.map(f => f.values.buffer || f.values || []);\n\n                        if (values[0] && values[0].length > 0) {\n                            const displayNameIdx = fields.findIndex(f => f.name === 'displayName');\n                            const businessPurposeIdx = fields.findIndex(f => f.name === 'businessPurpose');\n                            const currentHealthIdx = fields.findIndex(f => f.name === 'current_health');\n                            const healthStatusIdx = fields.findIndex(f => f.name === 'health_status');\n                            const openIncidentsIdx = fields.findIndex(f => f.name === 'open_incidents');\n\n                            // Update service info\n                            if (displayNameIdx >= 0) {\n                                const serviceName = htmlNode.querySelector('#serviceName');\n                                if (serviceName) serviceName.textContent = values[displayNameIdx][0];\n                            }\n                            if (businessPurposeIdx >= 0) {\n                                const businessPurpose = htmlNode.querySelector('#businessPurpose');\n                                if (businessPurpose) businessPurpose.textContent = values[businessPurposeIdx][0];\n                            }\n\n                            // Update metrics - now using signal-based health\n                            if (currentHealthIdx >= 0 && healthStatusIdx >= 0) {\n                                const healthPct = values[currentHealthIdx][0] || 0;\n                                const healthStatus = values[healthStatusIdx][0] || 'Unknown';\n                                const healthElement = htmlNode.querySelector('#currentHealth');\n                                const healthCard = htmlNode.querySelector('#healthCard');\n\n                                if (healthElement) {\n                                    // Display: \"77.8% (Red)\" format\n                                    healthElement.textContent = healthPct.toFixed(1) + '% (' + healthStatus + ')';\n                                    // Color based on status (worst wins)\n                                    const statusClass = healthStatus === 'Green' ? 'metric-value-good' :\n                                                       healthStatus === 'Amber' ? 'metric-value-warning' :\n                                                       'metric-value-critical';\n                                    healthElement.className = 'metric-value ' + statusClass;\n                                }\n                                if (healthCard) {\n                                    const cardClass = healthStatus === 'Green' ? 'metric-health-good' :\n                                                     healthStatus === 'Amber' ? 'metric-health-warning' :\n                                                     'metric-health-critical';\n                                    healthCard.className = 'metric-card ' + cardClass;\n                                }\n                            }\n\n                            if (openIncidentsIdx >= 0) {\n                                const incidentCount = values[openIncidentsIdx][0] || 0;\n                                const openIncidents = htmlNode.querySelector('#openIncidents');\n                                if (openIncidents) {\n                                    openIncidents.textContent = incidentCount;\n                                }\n                            }\n                        }\n                    }\n\n                    // Process stakeholder expectations data\n                    const expectationsTableBody = htmlNode.querySelector('#expectationsTableBody');\n                    if (expectationsTableBody) {\n                        if (expectationsData && expectationsData.fields && expectationsData.fields.length > 0) {\n                            const fields = expectationsData.fields;\n                            const values = fields.map(f => f.values.buffer || f.values || []);\n\n                            if (values[0] && values[0].length > 0) {\n                                const groupIdx = fields.findIndex(f => f.name === 'stakeholderGroup');\n                                const typeIdx = fields.findIndex(f => f.name === 'stakeholderType');\n                                const expectationIdx = fields.findIndex(f => f.name === 'expectationStatement');\n                                const priorityIdx = fields.findIndex(f => f.name === 'priority');\n\n                                let tableHTML = '';\n                                for (let i = 0; i < values[0].length; i++) {\n                                    const group = groupIdx >= 0 ? values[groupIdx][i] : '';\n                                    const type = typeIdx >= 0 ? values[typeIdx][i] : '';\n                                    const expectation = expectationIdx >= 0 ? values[expectationIdx][i] : '';\n                                    const priority = priorityIdx >= 0 ? values[priorityIdx][i] : '';\n\n                                    // Format stakeholder column: \"group (type)\"\n                                    const stakeholder = group + (type ? ' (' + type + ')' : '');\n\n                                    // Color code priority\n                                    let priorityClass = '';\n                                    if (priority === 'CRITICAL') priorityClass = 'status-red';\n                                    else if (priority === 'HIGH') priorityClass = 'status-amber';\n                                    else priorityClass = 'status-green';\n\n                                    tableHTML += '<tr>';\n                                    tableHTML += '<td style=\"font-weight: 500\">' + stakeholder + '</td>';\n                                    tableHTML += '<td>' + expectation + '</td>';\n                                    tableHTML += '<td style=\"text-align: center\"><span class=\"' + priorityClass + '\">' + priority + '</span></td>';\n                                    tableHTML += '</tr>';\n                                }\n                                expectationsTableBody.innerHTML = tableHTML;\n                            } else {\n                                expectationsTableBody.innerHTML = '<tr><td colspan=\"3\" class=\"no-data\">No stakeholder expectations defined</td></tr>';\n                            }\n                        } else {\n                            expectationsTableBody.innerHTML = '<tr><td colspan=\"3\" class=\"no-data\">No stakeholder expectations defined</td></tr>';\n                        }\n                    }\n\n                    // Process SLI data\n                    const sliTableBody = htmlNode.querySelector('#sliTableBody');\n                    if (sliTableBody) {\n                        if (sliData && sliData.fields && sliData.fields.length > 0) {\n                            const fields = sliData.fields;\n                            const values = fields.map(f => f.values.buffer || f.values || []);\n\n                            if (values[0] && values[0].length > 0) {\n                                const nameIdx = fields.findIndex(f => f.name === 'sli_display_name');\n                                const currentIdx = fields.findIndex(f => f.name === 'current_value');\n                                const targetIdx = fields.findIndex(f => f.name === 'target');\n                                const timestampIdx = fields.findIndex(f => f.name === 'last_updated');\n\n                                let tableHTML = '';\n                                for (let i = 0; i < values[0].length; i++) {\n                                    const name = nameIdx >= 0 ? values[nameIdx][i] : '';\n                                    const current = currentIdx >= 0 ? (values[currentIdx][i] || 0) : 0;\n                                    const target = targetIdx >= 0 ? (values[targetIdx][i] || 0) : 0;\n                                    const timestamp = timestampIdx >= 0 ? values[timestampIdx][i] : '';\n\n                                    // Convert to numbers if they're strings\n                                    const currentNum = typeof current === 'string' ? parseFloat(current) : current;\n                                    const targetNum = typeof target === 'string' ? parseFloat(target) : target;\n\n                                    // Determine status\n                                    let status = 'Unknown';\n                                    let statusClass = 'status-unknown';\n                                    if (currentNum >= targetNum) {\n                                        status = 'Green';\n                                        statusClass = 'status-green';\n                                    } else if (currentNum >= targetNum - 2.0) {\n                                        status = 'Amber';\n                                        statusClass = 'status-amber';\n                                    } else {\n                                        status = 'Red';\n                                        statusClass = 'status-red';\n                                    }\n\n                                    tableHTML += '<tr>';\n                                    tableHTML += '<td style=\"font-weight: 500\">' + name + '</td>';\n                                    tableHTML += '<td style=\"text-align: center\">' + currentNum.toFixed(1) + '%</td>';\n                                    tableHTML += '<td style=\"text-align: center\">' + targetNum.toFixed(1) + '%</td>';\n                                    tableHTML += '<td style=\"text-align: center\"><span class=\"' + statusClass + '\">' + status + '</span></td>';\n                                    tableHTML += '<td>' + formatTimestamp(timestamp) + '</td>';\n                                    tableHTML += '</tr>';\n                                }\n                                sliTableBody.innerHTML = tableHTML;\n                            } else {\n                                sliTableBody.innerHTML = '<tr><td colspan=\"5\" class=\"no-data\">No SLIs defined</td></tr>';\n                            }\n                        } else {\n                            sliTableBody.innerHTML = '<tr><td colspan=\"5\" class=\"no-data\">No SLIs defined</td></tr>';\n                        }\n                    }\n\n                    // Process signals data\n                    const signalsTableBody = htmlNode.querySelector('#signalsTableBody');\n                    if (signalsTableBody) {\n                        if (signalsData && signalsData.fields && signalsData.fields.length > 0) {\n                            const fields = signalsData.fields;\n                            const values = fields.map(f => f.values.buffer || f.values || []);\n\n                            if (values[0] && values[0].length > 0) {\n                                const idIdx = fields.findIndex(f => f.name === 'signal_id');\n                                const typeIdx = fields.findIndex(f => f.name === 'signal_type');\n                                const nameIdx = fields.findIndex(f => f.name === 'signal_name');\n                                const statusIdx = fields.findIndex(f => f.name === 'status');\n                                const timestampIdx = fields.findIndex(f => f.name === 'timestamp');\n\n                                let tableHTML = '';\n                                for (let i = 0; i < values[0].length; i++) {\n                                    const signalId = idIdx >= 0 ? values[idIdx][i] : '';\n                                    const type = typeIdx >= 0 ? values[typeIdx][i] : '';\n                                    const name = nameIdx >= 0 ? values[nameIdx][i] : '';\n                                    const status = statusIdx >= 0 ? values[statusIdx][i] : '';\n                                    const timestamp = timestampIdx >= 0 ? values[timestampIdx][i] : '';\n\n                                    const typeClass = 'signal-type-' + type.toLowerCase();\n                                    const statusClass = 'status-' + status.toLowerCase();\n\n                                    tableHTML += '<tr>';\n                                    tableHTML += '<td class=\"' + typeClass + '\">' + type + '</td>';\n                                    tableHTML += '<td><a href=\"/d/signal-detail-splunk-v1?var-signal_id=' + signalId + '&var-service_id=' + serviceId + '\" style=\"color: #000; text-decoration: underline\">' + name + '</a></td>';\n                                    tableHTML += '<td style=\"text-align: center\"><span class=\"' + statusClass + '\">' + status + '</span></td>';\n                                    tableHTML += '<td>' + formatTimestamp(timestamp) + '</td>';\n                                    tableHTML += '</tr>';\n                                }\n                                signalsTableBody.innerHTML = tableHTML;\n                            } else {\n                                signalsTableBody.innerHTML = '<tr><td colspan=\"4\" class=\"no-data\">No signals configured</td></tr>';\n                            }\n                        } else {\n                            signalsTableBody.innerHTML = '<tr><td colspan=\"4\" class=\"no-data\">No signal data available</td></tr>';\n                        }\n                    }\n\n                    // Process incidents data\n                    const incidentsTableBody = htmlNode.querySelector('#incidentsTableBody');\n                    if (incidentsTableBody) {\n                        if (incidentsData && incidentsData.fields && incidentsData.fields.length > 0) {\n                            const fields = incidentsData.fields;\n                            const values = fields.map(f => f.values.buffer || f.values || []);\n\n                            if (values[0] && values[0].length > 0) {\n                                const idIdx = fields.findIndex(f => f.name === 'incident_id');\n                                const severityIdx = fields.findIndex(f => f.name === 'severity');\n                                const statusIdx = fields.findIndex(f => f.name === 'status');\n                                const summaryIdx = fields.findIndex(f => f.name === 'summary');\n\n                                let tableHTML = '';\n                                for (let i = 0; i < values[0].length; i++) {\n                                    const id = idIdx >= 0 ? values[idIdx][i] : '';\n                                    const severity = severityIdx >= 0 ? values[severityIdx][i] : '';\n                                    const status = statusIdx >= 0 ? values[statusIdx][i] : '';\n                                    const summary = summaryIdx >= 0 ? values[summaryIdx][i] : '';\n\n                                    const severityClass = 'severity-' + severity.toLowerCase();\n\n                                    tableHTML += '<tr>';\n                                    tableHTML += '<td style=\"color: #5794F2; font-weight: 500\">' + id + '</td>';\n                                    tableHTML += '<td><span class=\"' + severityClass + '\">' + severity + '</span></td>';\n                                    tableHTML += '<td><span class=\"status-amber\">' + status + '</span></td>';\n                                    tableHTML += '<td class=\"incident-summary\" title=\"' + summary + '\">' + summary + '</td>';\n                                    tableHTML += '</tr>';\n                                }\n                                incidentsTableBody.innerHTML = tableHTML;\n                            } else {\n                                incidentsTableBody.innerHTML = '<tr><td colspan=\"4\" class=\"no-data\">No open incidents</td></tr>';\n                            }\n                        } else {\n                            incidentsTableBody.innerHTML = '<tr><td colspan=\"4\" class=\"no-data\">No open incidents</td></tr>';\n                        }\n                    }\n\n                    // Process business impact data\n                    if (impactData && impactData.fields && impactData.fields.length > 0) {\n                        const fields = impactData.fields;\n                        const values = fields.map(f => f.values.buffer || f.values || []);\n\n                        if (values[0] && values[0].length > 0) {\n                            const nameIdx = fields.findIndex(f => f.name === 'indicatorDisplayName');\n                            const unitIdx = fields.findIndex(f => f.name === 'unit');\n                            const categoryIdx = fields.findIndex(f => f.name === 'impactCategory');\n                            const valueIdx = fields.findIndex(f => f.name === 'current_value');\n                            const statusIdx = fields.findIndex(f => f.name === 'status');\n                            const signalIdx = fields.findIndex(f => f.name === 'signal_id');\n\n                            // Helper function to format impact values\n                            const formatImpactValue = (value, unit) => {\n                                if (value === null || value === undefined) return 'Not measured';\n                                const numValue = typeof value === 'string' ? parseFloat(value) : value;\n                                if (isNaN(numValue)) return 'Not measured';\n\n                                if (unit === 'customers' || unit === 'count') {\n                                    return '~' + numValue.toLocaleString() + ' ' + unit;\n                                } else if (unit === 'dollars') {\n                                    return '~$' + numValue.toLocaleString();\n                                } else if (unit === 'violations' || unit === 'interventions') {\n                                    return '~' + numValue + ' ' + unit;\n                                }\n                                return '~' + numValue + ' ' + unit;\n                            };\n\n                            // Process each impact indicator\n                            for (let i = 0; i < values[0].length; i++) {\n                                const category = categoryIdx >= 0 ? values[categoryIdx][i] : '';\n                                const currentValue = valueIdx >= 0 ? values[valueIdx][i] : null;\n                                const unit = unitIdx >= 0 ? values[unitIdx][i] : '';\n                                const signalId = signalIdx >= 0 ? values[signalIdx][i] : '';\n\n                                const formattedValue = formatImpactValue(currentValue, unit);\n\n                                // Update appropriate card based on category\n                                if (category === 'customer_experience') {\n                                    const elem = htmlNode.querySelector('#impactCustomer');\n                                    const signalElem = htmlNode.querySelector('#impactCustomerSignal');\n                                    if (elem) elem.textContent = formattedValue;\n                                    if (signalElem && signalId) {\n                                        signalElem.innerHTML = '<a href=\"/d/businessimpact-signal-detail-splunk-v1?var-signal_id=' + signalId + '&var-service_id=' + serviceId + '\" style=\"color: #000; text-decoration: underline\">Signal: ' + signalId + '</a>';\n                                    }\n                                } else if (category === 'financial') {\n                                    const elem = htmlNode.querySelector('#impactFinancial');\n                                    const signalElem = htmlNode.querySelector('#impactFinancialSignal');\n                                    if (elem) elem.textContent = formattedValue;\n                                    if (signalElem && signalId) {\n                                        signalElem.innerHTML = '<a href=\"/d/businessimpact-signal-detail-splunk-v1?var-signal_id=' + signalId + '&var-service_id=' + serviceId + '\" style=\"color: #000; text-decoration: underline\">Signal: ' + signalId + '</a>';\n                                    }\n                                } else if (category === 'legal_risk') {\n                                    const elem = htmlNode.querySelector('#impactLegalRisk');\n                                    const signalElem = htmlNode.querySelector('#impactLegalRiskSignal');\n                                    if (elem) elem.textContent = formattedValue;\n                                    if (signalElem && signalId) {\n                                        signalElem.innerHTML = '<a href=\"/d/businessimpact-signal-detail-splunk-v1?var-signal_id=' + signalId + '&var-service_id=' + serviceId + '\" style=\"color: #000; text-decoration: underline\">Signal: ' + signalId + '</a>';\n                                    }\n                                } else if (category === 'operational') {\n                                    const elem = htmlNode.querySelector('#impactOperational');\n                                    const signalElem = htmlNode.querySelector('#impactOperationalSignal');\n                                    if (elem) elem.textContent = formattedValue;\n                                    if (signalElem && signalId) {\n                                        signalElem.innerHTML = '<a href=\"/d/businessimpact-signal-detail-splunk-v1?var-signal_id=' + signalId + '&var-service_id=' + serviceId + '\" style=\"color: #000; text-decoration: underline\">Signal: ' + signalId + '</a>';\n                                    }\n                                }\n                            }\n                        } else {\n                            // No impact data - show empty state message\n                            const impactGrid = htmlNode.querySelector('#impactGrid');\n                            if (impactGrid) {\n                                impactGrid.innerHTML = '<div class=\"empty-state\">Business impact indicators not yet defined for this service.<br><span class=\"empty-state-action\">[Define Business Impact Signals]</span></div>';\n                            }\n                        }\n                    } else {\n                        // No impact data - show empty state message\n                        const impactGrid = htmlNode.querySelector('#impactGrid');\n                        if (impactGrid) {\n                            impactGrid.innerHTML = '<div class=\"empty-state\">Business impact indicators not yet defined for this service.<br><span class=\"empty-state-action\">[Define Business Impact Signals]</span></div>';\n                        }\n                    }\n\n                } catch (error) {\n                    console.error('Error processing data:', error);\n                    const signalsTableBody = htmlNode.querySelector('#signalsTableBody');\n                    const incidentsTableBody = htmlNode.querySelector('#incidentsTableBody');\n                    if (signalsTableBody) {\n                        signalsTableBody.innerHTML = '<tr><td colspan=\"4\" style=\"color: #EF4444\">Error: ' + error.message + '</td></tr>';\n                    }\n                    if (incidentsTableBody) {\n                        incidentsTableBody.innerHTML = '<tr><td colspan=\"4\" style=\"color: #EF4444\">Error: ' + error.message + '</td></tr>';\n                    }\n                }\n            ",
        "showDatapoints": false,
        "wrapSingleValueInContainer": true
      },
      "transparent": false
    }
  ],
  "refresh": "30s",
  "schemaVersion": 39,
  "tags": [
    "executive",
    "service-detail",
    "minimalist",
    "splunk"
  ],
  "templating": {
    "list": [
      {
        "datasource": {
          "type": "grafana-splunk-datasource",
          "uid": "d4c682f8-fd9b-46b2-9b89-e15410aa52dc"
        },
        "definition": "",
        "hide": 0,
        "includeAll": false,
        "label": "L4 Product Line",
        "multi": false,
        "name": "l4_product_line",
        "options": [],
        "query": "| inputlookup bos_services.csv | stats count by l4_product_line | fields l4_product_line | sort l4_product_line",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "datasource": {
          "type": "grafana-splunk-datasource",
          "uid": "d4c682f8-fd9b-46b2-9b89-e15410aa52dc"
        },
        "definition": "",
        "hide": 0,
        "includeAll": false,
        "label": "L3 Product",
        "multi": false,
        "name": "l3_product",
        "options": [],
        "query": "| inputlookup bos_services.csv | where l4_product_line=\"$l4_product_line\" | stats count by l3_product | fields l3_product | sort l3_product",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "datasource": {
          "type": "grafana-splunk-datasource",
          "uid": "d4c682f8-fd9b-46b2-9b89-e15410aa52dc"
        },
        "definition": "",
        "hide": 0,
        "includeAll": false,
        "label": "Service",
        "multi": false,
        "name": "service_id",
        "options": [],
        "query": "| inputlookup bos_services.csv | where l4_product_line=\"$l4_product_line\" AND l3_product=\"$l3_product\" | fields service_id | sort service_id",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now-24h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "browser",
  "title": "L3 Product Service Detail (Minimalist Splunk v1)",
  "uid": "exec-l3-service-detail-splunk-v1",
  "version": 1,
  "weekStart": ""
}
